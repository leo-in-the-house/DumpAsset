<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMDC</name>
    </assembly>
    <members>
        <member name="F:PMDC.Data.MonsterFeatureData.FeatureData">
            <summary>
            Maps monster, form to summary
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.Generation">
            <summary>
            What generation it was introduced in
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.GenderlessWeight">
            <summary>
            How often it appears as genderless (weight)
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.MaleWeight">
            <summary>
            How often it appears as male (weight)
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.FemaleWeight">
            <summary>
            How often it appears as female (weight)
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.BaseHP">
            <summary>
            Base HP stat
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.BaseAtk">
            <summary>
            Base attack stat
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.BaseDef">
            <summary>
            Base defense stat
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.BaseMAtk">
            <summary>
            Base special attack stat
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.BaseMDef">
            <summary>
            Base special defense stat
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.BaseSpeed">
            <summary>
            Base speed stat
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.ExpYield">
            <summary>
            Base EXP yield
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.Height">
            <summary>
            species/form height
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.Weight">
            <summary>
            species/form weight
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.Personalities">
            <summary>
            Possible personalities (advanced)
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.TeachSkills">
            <summary>
            Moves learned by TM
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.SharedSkills">
            <summary>
            Egg moves
            </summary>
        </member>
        <member name="F:PMDC.Data.MonsterFormData.SecretSkills">
            <summary>
            Tutor moves
            </summary>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.GetStat(System.Int32,RogueEssence.Data.Stat,System.Int32)">
            <summary>
            Calculates stat based on level, stat type, and bonus
            </summary>
            <param name="level"></param>
            <param name="stat"></param>
            <param name="bonus"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.RollSkin(RogueElements.IRandom)">
            <summary>
            Rolls a random skin (shinyness) this monster can spawn with
            </summary>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.GetPersonalityType(System.Int32)">
            <summary>
            Gets a personality type given an integer (advanced)
            </summary>
            <param name="discriminator"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.RollGender(RogueElements.IRandom)">
            <summary>
            Rolls a possible gender this monster can spawn as
            </summary>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.RollIntrinsic(RogueElements.IRandom,System.Int32)">
            <summary>
            Rolls a random ability this monster can spawn as.  No hidden abilities.
            </summary>
            <param name="rand"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.GetPossibleGenders">
            <summary>
            Gets the possible genders that can be rolled
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.GetPossibleSkins">
            <summary>
            Gets the possible skins that can be rolled
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.GetPossibleIntrinsicSlots">
            <summary>
            Gets the possible intrinsic slots that can be rolled
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.GetMaxStat(RogueEssence.Data.Stat,System.Int32)">
            <summary>
            Gets its max stat for a given stat type
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Data.MonsterFormData.CanLearnSkill(System.String)">
            <summary>
            Checks if it can learn the skill
            </summary>
            <param name="skill"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.Data.EvoMapStart">
            <summary>
            Condition: if in a dungeon map and a turn has not passed.
            </summary>
        </member>
        <member name="F:PMDC.Data.RarityData.RarityMap">
            <summary>
            Maps monster, rarity to list of applicable items 
            </summary>
        </member>
        <member name="M:PMDC.Dev.DevHelper.findEvos(RogueEssence.Dungeon.MonsterID,System.Boolean)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="encountersOnly">For use for encounter data only.</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dev.DevHelper.PrintAllUnfinishedMoves">
            <summary>
            Prints all the moves that can appear in the game due to the monsters appearing in the game, and alerts which unfinished ones need to be finished
            </summary>
        </member>
        <member name="M:PMDC.Dev.DevHelper.PrintAbilityUsers(System.String)">
            <summary>
            Gets the abilities from a text file in the path, and prints the monsters that are capable of each.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:PMDC.Dev.DevHelper.PrintMoveUsers(System.String)">
            <summary>
            Gets the moves from a text file in the path, and prints the monsters that are capable of using each.
            </summary>
            <param name="path"></param>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.TeamPartner">
            <summary>
            will not attack enemyoffriend
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.Cannibal">
            <summary>
            will attack allies if given the opportunity
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.ItemGrabber">
            <summary>
            will pick up items
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.ItemMaster">
            <summary>
            Knows how to use items
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.KnowsMatchups">
            <summary>
            Is aware of move-neutralizing abilities
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.AttackToEscape">
            <summary>
            Uses moves to escape
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.WontDisturb">
            <summary>
            will not attack sleepers/the frozen
            but will still wait on them to thaw out instead of walking away
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.TrapAvoider">
            <summary>
            Avoids traps
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIFlags.PlayerSense">
            <summary>
            Has the sensibilities of a player team's ally
            will not walk into silcoon/cascoon
            will not hit allies even if it's worth it to hit more foes
            will not path to the last seen location of an enemy if it finds no enemies
            will not attack or target certain AI
            will not attack or target sleepers and frozen, full stop
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.IQ">
            <summary>
            The strategy that the monster takes when it goes aggro
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.RestrictedMobilityTypes">
            <summary>
            Mobility types where, even if the Pokemon could enter, the AI will not allow it to move into
            If the Pokemon does not have a non-restricted mobility type around it, it will refuse to move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.RestrictMobilityPassable">
            <summary>
            Whether to restrict the Pokemon's movement on passable terrain as well.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.StandardAttack">
            <summary>
            Only chooses standard attack.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.DumbAttack">
            <summary>
            randomly chooses moves based on weight, sometimes walks within range due to missing moves having weight
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.RandomAttack">
            <summary>
            randomly chooses moves based on weight, always attacks with damaging moves when within range, but sometimes moves forward if the only choice is a status move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.StatusAttack">
            <summary>
            randomly chooses a status move first and foremost
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.AttackChoice.SmartAttack">
            <summary>
            always chooses the best move, and always attacks when within range
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.PositionChoice.Approach">
            <summary>
            move in even if it's out of range of moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.PositionChoice.Close">
            <summary>
            move in as close as possible within range of moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AIPlan.PositionChoice.Avoid">
            <summary>
            move as far as possible within range
            </summary>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.canPassChar(RogueEssence.Dungeon.Character,RogueEssence.Dungeon.Character,System.Boolean)">
            <summary>
            Checks if the controlled character can push over the target character, based on ordering and matchup
            </summary>
            <param name="controlledChar"></param>
            <param name="destChar"></param>
            <param name="yieldToTeam">Considers other team members non-passable, even if they are lower rank.</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.playerSensibleToAttack(RogueEssence.Dungeon.Character)">
            <summary>
            Is it sensible for a player character to attack this way?
            </summary>
            <param name="seenChar"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.BlockedByObstacleChar(RogueEssence.Dungeon.Character,RogueElements.Loc)">
            <summary>
            A character is being an obstacle if they cannot move (status effect), or choose not to move (ai).
            This also includes opponents.
            </summary>
            <param name="controlledChar"></param>
            <param name="testLoc"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.getWrappedEnds(RogueElements.Loc,RogueElements.Loc[])">
            <summary>
            End locs may appear multiple times in wrapped maps, and this function chooses the end locs that are closest to the start loc.
            This is done by checking a rectangle equal to the whole map's size, but centered on the start.
            This only works in wrapped maps.  ignore in non-wrapped maps
            </summary>
            <param name="mapStart"></param>
            <param name="mapSize"></param>
            <param name="start"></param>
            <param name="ends"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetPaths(RogueEssence.Dungeon.Character,RogueElements.Loc[],System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Gets the path directly to a target
            </summary>
            <param name="controlledChar"></param>
            <param name="ends"></param>
            <param name="freeGoal">Determines whether the goal should be reachable even if blocked.</param>
            <param name="respectPeers">Considers entities as blockers</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetPathsImpassable(RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueElements.Loc})">
            <summary>
            Gets all paths to all targets, only considering impassable blocks as blockers.
            </summary>
            <param name="controlledChar"></param>
            <param name="ends"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.TryAttackChoice(RogueElements.IRandom,RogueEssence.Dungeon.Character,PMDC.Dungeon.AIPlan.AttackChoice,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rand"></param>
            <param name="controlledChar"></param>
            <param name="attackPattern"></param>
            <param name="includeImagine">Excludes imaginary hits from causing attack fallthrough.  This will also skip threat checking.</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.TryBestAttackChoice(RogueElements.IRandom,RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueEssence.Dungeon.Character},RogueEssence.Dungeon.Character)">
            <summary>
            Always chooses the best attack
            </summary>
            <param name="rand"></param>
            <param name="controlledChar"></param>
            <param name="defaultDir"></param>
            <param name="seenChars"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.UpdateHighestIndices(System.Collections.Generic.List{PMDC.Dungeon.ActionDirValue},RogueEssence.Dungeon.GameAction,PMDC.Dungeon.HitValue[])">
            <summary>
            Updates the highest indices list with the GameAction with the highest score.
            </summary>
            <param name="highestIndices"></param>
            <param name="baseAction">Non-directional action to use.  Direction will be selected when adding to list.</param>
            <param name="attackDirs"></param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.UpdateTotalIndices(RogueElements.IRandom,System.Collections.Generic.List{PMDC.Dungeon.ActionDirValue},RogueEssence.Dungeon.GameAction,PMDC.Dungeon.HitValue[])">
            <summary>
            Updates the highest indices list with the GameAction with all scores.
            </summary>
            <param name="rand"></param>
            <param name="totalIndices"></param>
            <param name="baseAction">Non-directional action to use.  Direction will be selected when adding to list.</param>
            <param name="attackDirs"></param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetActionValues(RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueEssence.Dungeon.Character},RogueEssence.Dungeon.Character,System.String,PMDC.Dungeon.HitValue[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="controlledChar"></param>
            <param name="closestThreat">A character that will be used to judge an imagined hit. Leave blank for no imagined hits.</param>
            <param name="seenChars"></param>
            <param name="moveIndex"></param>
            <param name="dirs"></param>
            <param name="includeImagined">Whether or not we want to consider hypothetical hit weights.</param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.FillRangeTargets(RogueEssence.Dungeon.Character,System.Collections.Generic.List{RogueEssence.Dungeon.Character},System.Collections.Generic.Dictionary{RogueElements.Loc,PMDC.Dungeon.RangeTarget},System.Boolean)">
            <summary>
            
            </summary>
            <param name="controlledChar"></param>
            <param name="seenChars"></param>
            <param name="endHash"></param>
            <param name="blindspotOnly">Will only treat blindspot attacks as attacks that need to path to tiles.</param>
        </member>
        <member name="M:PMDC.Dungeon.AIPlan.GetTargetEffect(RogueEssence.Dungeon.Character,System.String,RogueEssence.Data.SkillData,System.Collections.Generic.List{RogueEssence.Dungeon.Character},RogueEssence.Dungeon.Character,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="controlledChar"></param>
            <param name="moveIndex"></param>
            <param name="entry"></param>
            <param name="seenChars"></param>
            <param name="target"></param>
            <param name="rangeMod"></param>
            <returns>Positive number means a positive effect for the target, negative number means a negative effect for the target.</returns>
        </member>
        <member name="M:PMDC.Dungeon.AttackFoesPlan.comparePathValues(PMDC.Dungeon.AIPlan.PositionChoice,PMDC.Dungeon.RangeTarget,PMDC.Dungeon.RangeTarget)">
            <summary>
            1 = better, -1 worse, 0 = equal 
            </summary>
            <param name="newVal"></param>
            <param name="curBest"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.Dungeon.CultDancePlan">
            <summary>
            Dances around an item until a team member is attacked or the item is gone
            </summary>
        </member>
        <member name="M:PMDC.Dungeon.PrepareWithLeaderPlan.closestToHighestLeader(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the controlled character is close to the highest ranking member in sight.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMDC.Dungeon.PrepareWithLeaderPlan.transitivelyTouchesLeader(RogueEssence.Dungeon.Character)">
            <summary>
            Checks if the controlled character is transitively close to THE leader. Unsure if should use this method.
            </summary>
            <param name="controlledChar"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.Dungeon.ThiefPlan">
            <summary>
            will attack players if its original item is their current item, or if its has no item
            will use dash moves to get away, if given the chance
            runs away using A*
            does not pick up items
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreActionEvent">
            <summary>
            Event that occurs before the user does an action
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreActionEvent.LastSlotStatusID">
            <summary>
            The status that will store the last used slot
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreActionEvent.LastMoveStatusID">
            <summary>
            The status that will store the last used move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreActionEvent.RepeatStatusID">
            <summary>
            The status that will store how many times the same move was used 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreHitEvent">
            <summary>
            Event that occurs before the target takes the hit
            This sets the target's level which defense stat they will use 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiBattleEvent">
            <summary>
            Event that groups multiple battle events into one event
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiBattleEvent.BaseEvents">
            <summary>
            The list of battle events to apply
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AttemptHitEvent">
            <summary>
            Event that calculates whether the target is hit, taking consideration into the move accuracy,
            the user's accuracy boost, whether the moved missed last turn, etc.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreSkillEvent">
            <summary>
            Event that occurs when a move is used from the menu
            This sets the battle context data from the move and checks if the user has enough PP and the move is not disabled 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreItemEvent">
            <summary>
            Event that occurs when an item is used from the menu
            This sets the battle context data from the item and checks if the item is sticky
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreThrowEvent">
            <summary>
            Event that occurs when an item is thrown from the menu
            This sets different battle context data depending if the item is sticky, whether the item is thrown in an arc, etc
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BattlelessEvent">
            <summary>
            Event that converts a SingleCharEvent to a battle event
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattlelessEvent.BaseEvent">
            <summary>
            The SingleCharEvent being converted
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattlelessEvent.AffectTarget">
            <summary>
            Whether to affect the targer or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NpcDialogueBattleEvent">
            <summary>
            Event that displays the dialogue when interacting with an NPC
            This event should usually be placed inside the NPC's MobSpawnInteractable spawn feature
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NpcDialogueBattleEvent.Message">
            <summary>
            The message displayed when interacting with the NPC
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NpcDialogueBattleEvent.HideSpeaker">
            <summary>
            Whether to display the speaker portrait
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NpcDialogueBattleEvent.Emote">
            <summary>
            The portrait emotion
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BattleLogBattleEvent">
            <summary>
            Event that logs a StringKey message to the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleLogBattleEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleLogBattleEvent.Delay">
            <summary>
            Whether to have short delay after displaying the message
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleLogBattleEvent.UseTarget">
            <summary>
            Whether to use the target or user name when formatting the message
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FormatLogLocalEvent">
            <summary>
            Event that logs a string message to the dungeon log
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FormatLogLocalEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FormatLogLocalEvent.Delay">
            <summary>
            Whether to have short delay after displaying the message
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BattleAnimEvent">
            <summary>
            Event that applies a VFX on a character
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleAnimEvent.Emitter">
            <summary>
            The particle VFX 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleAnimEvent.Sound">
            <summary>
            The sound effect of the VFX
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleAnimEvent.AffectTarget">
            <summary>
            Whether to apply the VFX on the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BattleAnimEvent.Delay">
            <summary>
            The delay after the VFX
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ReflectAllEvent">
            <summary>
            Event that reflects all damaging moves to nearby foes
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectAllEvent.Numerator">
            <summary>
            The numerator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectAllEvent.Denominator">
            <summary>
            The denominator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectAllEvent.Range">
            <summary>
            Enemies within the radius will be dealt the reflected damage
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectAllEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.Conversion2Event">
            <summary>
            Converts the character type's to resist incoming moves
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ConversionEvent">
            <summary>
            Converts the character type's to the move last used 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ConversionEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StanceChangeEvent.ReqSpecies">
            <summary>
            The required species in order for this ability to activiate
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StanceChangeEvent.DefenseForme">
            <summary>
            The defense form ID of the species
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StanceChangeEvent.AttackForme">
            <summary>
            The attack form ID of the species
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StrongestMoveEvent">
            <summary>
            Event that makes the user use the target's strongest base power move
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RandomMoveEvent">
            <summary>
            Event that makes the user randomly use any move.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NeededMoveEvent">
            <summary>
            User will more likely use a random move that benefits the team
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NatureMoveEvent">
            <summary>
            Event that makes character will use a move that depends on the map status and dungeon type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NatureMoveEvent.TerrainPair">
            <summary>
            The move used mapped to the current map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NatureMoveEvent.NaturePair">
            <summary>
            The move used mapped to the current floor's nature environment
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MirrorMoveEvent">
            <summary>
            Event that makes the user use the last used move
            </summary>  
        </member>
        <member name="F:PMDC.Dungeon.MirrorMoveEvent.MoveStatusID">
            <summary>
            A status containing the move in IDState that this event will use
            This status should either be Last Used Effect, Last Ally Effect, Last Effect Hit By Someone Else
            </summary>   
        </member>
        <member name="T:PMDC.Dungeon.InvokeCustomBattleEvent">
            <summary>
            Event that is called as a turn-taking battle action
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.InvokeCustomBattleEvent.HitboxAction">
            <summary>
            Data on the hitbox of the attack. Controls range and targeting
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeCustomBattleEvent.Explosion">
            <summary>
            Optional data to specify a splash effect on the tiles hit
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeCustomBattleEvent.NewData">
            <summary>
            Events that occur with this skill.
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeCustomBattleEvent.Msg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeCustomBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ElementDifferentUseEvent">
            <summary>
            Event that uses a different battle action if the character is a certain type.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementDifferentUseEvent.Element">
            <summary>
            The type in order for this battle action to activate
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementDifferentUseEvent.HitboxAction">
            <summary>
            Data on the hitbox of the attack. Controls range and targeting
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementDifferentUseEvent.Explosion">
            <summary>
            Optional data to specify a splash effect on the tiles hit
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementDifferentUseEvent.NewData">
            <summary>
            Events that occur with this skill
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AlignmentDifferentEvent">
            <summary>
            Event that uses a different battle data if the target is an ally
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AlignmentDifferentEvent.NewData">
            <summary>
            Events that occur with this skill
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CatchableEvent">
            <summary>
            Event that checks whether an item can be caught and changes the battle data if so
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CatchableEvent.NewData">
            <summary>
            Events that occur when the item is caught
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeActionEvent">
            <summary>
            Event that changes the hitbox action
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeActionEvent.NewAction">
            <summary>
            Data on the hitbox of the attack. Controls range and targeting
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeDataEvent">
            <summary>
            Event that changes the battle data
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeDataEvent.NewAction">
            <summary>
            Events that occur with this skill
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeExplosionEvent">
            <summary>
            Event that changes the explosion data
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeExplosionEvent.NewAction">
            <summary>
            Optional data to specify a splash effect on the tiles hit
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusStackDifferentEvent">
            <summary>
            Event that uses different skill data depending on the stack number of the status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusStackDifferentEvent.StatusID">
            <summary>
            The status condition to track
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusStackDifferentEvent.FailMsg">
            <summary>
            The message displayed in the dungeon log if the character doesn't have this status or the stack amount does not map to a skill data
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusStackDifferentEvent.StackPair">
            <summary>
            The stack amount mapped to a skill data
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeatherDifferentEvent">
            <summary>
            Event that uses different battle data depending on map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherDifferentEvent.WeatherPair">
            <summary>
            The map status ID mapped to a battle data
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AbsorbWeaknessEvent">
            <summary>
            Event that activates if the character is hit by a super-effective move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbWeaknessEvent.BaseEvents">
            <summary>
            The list of battle events applied if the condition is met
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbWeaknessEvent.Emitter">
            <summary>
            The particle VFX that plays if the condition is met
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbWeaknessEvent.Sound">
            <summary>
            The sound effect that plays if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AbsorbElementEvent">
            <summary>
            Event that activates if the character is hit by the chosen type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbElementEvent.AbsorbElement">
            <summary>
            The type to absorb
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbElementEvent.SingleDraw">
            <summary>
            Whether or not multiple 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbElementEvent.GiveMsg">
            <summary>
            Whether to display the message if absorbed
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbElementEvent.BaseEvents">
            <summary>
            Battle events that occur if hit by the certain type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbElementEvent.Emitter">
            <summary>
            The particle VFX
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AbsorbElementEvent.Sound">
            <summary>
            The sound effect that plays if hit by a super-effective move
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyElementEvent">
            <summary>
            Event that boosts/reduces the attacks of the chosen type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyElementEvent.MultElement">
            <summary>
            The type affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyElementEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyElementEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyElementEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyElementEvent.Msg">
            <summary>
            Whether to display a message if the move type matches
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyNotElementEvent">
            <summary>
            Event that boosts/reduces the attacks of non-matching types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyNotElementEvent.NotMultElement">
            <summary>
            The types not affected by the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyNotElementEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyNotElementEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyNotElementEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyNotElementEvent.Msg">
            <summary>
            Whether to display a message if the move type does not match
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyStatusElementEvent">
            <summary>
            Event that boosts/reduces the attacks if the attack's type matches the type in ElementState (StatusState)
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyStatusElementEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyStatusElementEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyStatusElementEvent.Anims">
            <summary>
            The list of battle VFXs played if the type matches
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyFromFallenEvent">
            <summary>
            Event that modifies the damage multiplier based on how many teammates are defeated.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyFromFallenEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TeamReduceEvent">
            <summary>
            Event that changes the battle event depending on the total amount of team members of the same type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TeamReduceEvent.QualifyingElement">
            <summary>
            The qualifying type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TeamReduceEvent.Tier1Event">
            <summary>
            Battle event that occurs if only 1 team member has the type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TeamReduceEvent.Tier2Event">
            <summary>
            Battle event that occurs if only 2 team members has the type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TeamReduceEvent.Tier3Event">
            <summary>
            Battle event that occurs if only 3 team members has the type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TeamReduceEvent.Tier4Event">
            <summary>
            Battle event that occurs if 4 or more team members has the type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PinchEvent">
            <summary>
            Event that boosts/reduces an attack type of the user if their HP is low.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PinchEvent.PinchElement">
            <summary>
            The qualifying type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PinchNeededEvent">
            <summary>
            Event that activates if the user's HP is below threshold
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PinchNeededEvent.Denominator">
            <summary>
            The denominator of the HP percentage 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PinchNeededEvent.AffectTarget">
            <summary>
            Whether to affect the user or target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PinchNeededEvent.BaseEvents">
            <summary>
            The list of battle events applied if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AdaptabilityEvent">
            <summary>
            Event that boosts the attack if the move type is the same type as the character 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SingleStrikeEvent">
            <summary>
            Event that sets the total strikes to be 1 if no strikes have been made
            Used by the move Sky Drop
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiStrikeEvent">
            <summary>
            Event that modifies the total amount the character strikes
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiStrikeEvent.StrikeMult">
            <summary>
            The total amount of strikes
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiStrikeEvent.Div">
            <summary>
            Whether to make the strikes progressively weaker
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HarvestEvent">
            <summary>
            UNUSED
            Event that causes the character to use the effects of berries twice.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BerryAoEEvent">
            <summary>
            Event that passes the affect of berries to nearby allies.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BerryAoEEvent.Msg">
            <summary>
            The message displayed in the dungeon log  
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BerryAoEEvent.Emitter">
            <summary>
            The particle VFX
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BerryAoEEvent.Sound">
            <summary>
            The sound effect of the VFX
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BerryBoostEvent">
            <summary>
            Event that boosts a random stat when the character eats a berry
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BerryBoostEvent.StatsToBoost">
            <summary>
            The list of stats to choose from
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PrepareJudgmentEvent">
            <summary>
            Event that prepares the Judgement's type and total strikes based on plates in the inventory
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PrepareJudgmentEvent.TypePair">
            <summary>
            The item used mapped to a type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PassJudgmentEvent">
            <summary>
            Event that changes the Judgement's type based on the current strikes made
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeMoveElementEvent">
            <summary>
            Event that changes a move's from one type to another
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeMoveElementEvent.ElementFrom">
            <summary>
            The type to change from
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeMoveElementEvent.ElementTo">
            <summary>
            The type to change to
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeMoveElementStateEvent">
            <summary>
            Event that sets the move type based on the type in ElementState
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyCategoryEvent">
            <summary>
            Event that boosts/reduces attacks of a skill category (ex: physical and special)
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryEvent.Category">
            <summary>
            The skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryEvent.Denominator">
            <summary>
            The denominator of the modififer
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FamilyBattleEvent">
            <summary>
            Item event that runs if the character is part of the evolution in FamilyState (ItemStates)
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FamilyBattleEvent.BaseEvent">
            <summary>
            Battle event that applies if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TypeSpecificMultCategoryEvent">
            <summary>
            Event that boosts/reduces attacks of a skill category of a certain type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TypeSpecificMultCategoryEvent.Element">
            <summary>
            The type affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TypeSpecificMultCategoryEvent.NoDupeState">
            <summary>
            Context state to prevent boost stacking
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TypeSpecificMultCategoryEvent.Category">
            <summary>
            The skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TypeSpecificMultCategoryEvent.NumeratorAdd">
            <summary>
            The numerator of the modifier + the denominator
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TypeSpecificMultCategoryEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BarrageGuardEvent">
            <summary>
            Event that modifies the damage multplier for multiple attacks taken in a turn.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BarrageGuardEvent.PrevHitID">
            <summary>
            Status that keeps track of the move last hit
            This status should usually be "was_hurt_last_turn"
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BarrageGuardEvent.Numerator">
            <summary>
            Numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BarrageGuardEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BarrageGuardEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyRecklessEvent">
            <summary>
            Event that modifies the damage multiplier for moves that have recoil damage
            The move must be a RecoilEvent or CrashLandEvent
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyRecklessEvent.Numerator">
            <summary>
            Numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyRecklessEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MoveStateNeededEvent">
            <summary>
            Event that applies if the move contains one of the specified SkillStates
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MoveStateNeededEvent.States">
            <summary>
            The list of valid SkillStates types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MoveStateNeededEvent.BaseEvents">
            <summary>
            The list of battle events applied if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyMoveStateEvent">
            <summary>
            Event that modifies the damage multiplier if the move contains one of the specified SkillStates
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyMoveStateEvent.States">
            <summary>
            The list of valid SkillStates types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyMoveStateEvent.Numerator">
            <summary>
            Numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyMoveStateEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveMoveStateEvent">
            <summary>
            Event that removes a SkillState from the battle data
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveMoveStateEvent.States">
            <summary>
            The list of SkillStates to remove
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyCategoryInWeatherEvent">
            <summary>
            Event that modifies the damage multiplier of a skill category under a map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInWeatherEvent.WeatherID">
            <summary>
            The map status to check for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInWeatherEvent.Category">
            <summary>
            The skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInWeatherEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInWeatherEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyCategoryInMajorStatusEvent">
            <summary>
            Event that modifies the damage multiplier of a skill category under a major status condition
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInMajorStatusEvent.Category">
            <summary>
            The skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInMajorStatusEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInMajorStatusEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInMajorStatusEvent.AffectTarget">
            <summary>
            Whether to affect the user or target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyCategoryWithoutStatusEvent">
            <summary>
            Event that modifies the damage multiplier of a skill category if not affected by the specified status condition.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryWithoutStatusEvent.StatusID">
            <summary>
            The status condition being checked for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryWithoutStatusEvent.Category">
            <summary>
            The skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryWithoutStatusEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryWithoutStatusEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryWithoutStatusEvent.AffectTarget">
            <summary>
            Whether to affect the user or target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyCategoryInStatusEvent">
            <summary>
            Event that modifies the damage multiplier of a skill category if affected by the specified status condition
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInStatusEvent.StatusID">
            <summary>
            The status condition being checked for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInStatusEvent.Category">
            <summary>
            The skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInStatusEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInStatusEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyCategoryInStatusEvent.AffectTarget">
            <summary>
            Whether to affect the user or target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BetterOddsEvent">
            <summary>
            Event that makes the move never miss and always land a critical hit if all moves have the same PP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FinalOddsEvent">
            <summary>
            Event that makes the move never miss and always land a critical hit if the move is on its last PP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SetAccuracyEvent">
            <summary>
            Event that sets the accuracy of the move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SetAccuracyEvent.Accuracy">
            <summary>
            The new accuracy
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyDamageEvent">
            <summary>
            Event that modifies the damage multiplier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyDamageEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyDamageEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyDamageEvent.Anims">
            <summary>
            The list of battle events that will be applied
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RivalryEvent">
            <summary>
            Event that modifies the damage multiplier if the user's gender is the same as the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RepeatStrikeEvent">
            <summary>
            Event that modifies the damage multiplier based on the strikes made divided by a denominator
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RepeatStrikeEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RepeatHitEvent">
            <summary>
            Event that boosts the damage multiplier based on moves used consecutively until a different move is used
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RepeatHitEvent.LastMoveStatusID">
            <summary>
            The status that contains the last used move in IDState status state
            This should usually be "last_used_move"
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RepeatHitEvent.MoveRepeatStatusID">
            <summary>
            The status that contains how times a move is used in the CountDownState status state
            This should usually be "times_move_used"
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RepeatHitEvent.Maximum">
            <summary>
            The maximum numerator of the move calculated by the denominator + how many times the same move is used
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RepeatHitEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RepeatHitEvent.EveryTurn">
            <summary>
            Whether the move must be used every turn in order to count
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TechnicianEvent">
            <summary>
            Event that boosts moves with low base power
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyEffectiveEvent">
            <summary>
            Event that modifies the damage multiplier based on how effective the move is
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyEffectiveEvent.Reverse">
            <summary>
            Whether to check if the move is not effective instead
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyEffectiveEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyEffectiveEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiplyEffectiveEvent.Anims">
            <summary>
            The list of battle VFXs played if the move type matches
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CritEffectiveEvent">
            <summary>
            Event that modifies the critical change rate based on how effective the move is
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CritEffectiveEvent.Reverse">
            <summary>
            Whether to check if the move is not effective instead
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CritEffectiveEvent.AddCrit">
            <summary>
            The added critical rate chance
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WonderGuardEvent">
            <summary>
            Event that only allows super-effective moves to hit
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WonderGuardEvent.Anims">
            <summary>
            The list of battle VFXs played if the move type matches
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BustFormEvent">
            <summary>
            Event that protects against an attack if the target is in the specified form, and changes to a different form if so.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BustFormEvent.ReqSpecies">
            <summary>
            Species needed to trigger protection
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BustFormEvent.ReqForm">
            <summary>
            The form needed to trigger protection
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BustFormEvent.ResultForm">
            <summary>
            The form to change ot after protection
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BustFormEvent.Msg">
            <summary>
            The message displayed in the dungeon log  
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BustFormEvent.Anims">
            <summary>
            The list of battle VFXs played if the protection triggers
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FullHPNeededEvent">
            <summary>
            UNUSED
            Event that causes the move to deal no damage if the target is not at full HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ExplorerImmuneEvent">
            <summary>
            Event that causes the move to deal no damage if the target is part of a explorer team
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HigherLevelImmuneEvent">
            <summary>
            UNUSED
            Event that causes the move to deal no damage if the target's level is higher than the user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OHKOImmuneEvent">
            <summary>
            UNUSED
            Event that causes a move to deal no damage if it's a OHKO move
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BlastProofEvent">
            <summary>
            Event that modifies the damage multiplier for explosion splash damage
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BlastProofEvent.Range">
            <summary>
            Protects the target from explosion splash damage up to this many tiles away
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BlastProofEvent.Numerator">
            <summary>
            Numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BlastProofEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BlastProofEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BlastProofEvent.Msg">
            <summary>
            Whether to log the message if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.UserStatBoostEvent">
            <summary>
            Event that modifies the specified stack boost by adding the value in the StackState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.UserStatBoostEvent.Stat">
            <summary>
            The stat to modify
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetStatBoostEvent">
            <summary>
            Event that modifies the specified stack boost by adding the value in the StackState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetStatBoostEvent.Stat">
            <summary>
            The stat to modify
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetStatAddEvent">
            <summary>
            Event that modifies the specified stack boost
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetStatAddEvent.Stat">
            <summary>
            The stat to modify
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetStatAddEvent.Mod">
            <summary>
            The value to modify the stat by
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CategoryAddRangeEvent">
            <summary>
            Event that modifies the range of the skill category affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CategoryAddRangeEvent.Category">
            <summary>
            The affected skill category
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.CategoryAddRangeEvent.Range">
            <summary>
            The range modifer
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeatherAddRangeEvent">
            <summary>
            Event that modifies the range of moves under a map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherAddRangeEvent.WeatherID">
            <summary>
            The map status to check for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherAddRangeEvent.Range">
            <summary>
            The range modifer
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MeleeHitTilesEvent">
            <summary>
            Event that modifies hitbox action of moves to hit tiles
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MeleeHitTilesEvent.Tile">
            <summary>
            USUSED
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PierceEvent">
            <summary>
            Event that modifies the hitbox action to pierce through enemies and walls
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PierceEvent.SkillsPierce">
            <summary>
            Whether to allow moves to pierce
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PierceEvent.ItemsPierce">
            <summary>
            Whether to allow items to pierce
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PierceEvent.PierceEnemies">
            <summary>
            Whether the action can pierce through enemies
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PierceEvent.PierceWalls">
            <summary>
            Whether the action can pierce through walls
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NoPierceEvent">
            <summary>
            Event that modifies the hitbox action to stop piercing through enemies and walls
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NoPierceEvent.PierceEnemies">
            <summary>
            Whether the action should stop piercing enemies
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NoPierceEvent.PierceWalls">
            <summary>
            Whether the action should stop piercing walls
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpreadProjectileEvent">
            <summary>
            Event that modifies the amount of ray projectiles of an action
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpreadProjectileEvent.Rays">
            <summary>
            The ray projectile amount
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MakeWideEvent">
            <summary>
            UNUSED
            Event that makes dash or attack actions wide.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ProtectEvent">
            <summary>
            Event that protects the user from all moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ProtectEvent.Anims">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ProtectEvent.Effects">
            <summary>
            The list of battle events applied if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultWhenMissEvent">
            <summary>
            Event that modifies the damage multplier if the user has the specified status condition
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultWhenMissEvent.StatusID">
            <summary>
            The status condition being checked for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultWhenMissEvent.Numerator">
            <summary>
            Numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultWhenMissEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvasiveWhenMissEvent">
            <summary>
            Event that modifies the accuracy rate if the target has the specified status condition
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EvasiveWhenMissEvent.StatusID">
            <summary>
            The status condition being checked for
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvasiveInPinchEvent">
            <summary>
            Event that modifies the accuracy rate if the target is below the specified HP threshold
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvasiveInDistanceEvent">
            <summary>
            Event that decreases the accuracy rate the further away the distance of the action
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvasiveCloseUpEvent">
            <summary>
            Event that decreases the accuracy rate at point blank
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeInStatusEvent">
            <summary>
            Event that causes the move to miss if the target has the specified status condition
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeStrongestEvent">
            <summary>
            Event that causes the move to miss if the user uses their strongest base power move
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeStrongestEffectiveEvent">
            <summary>
            Event that causes the user's strongest super-effective move to miss
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeMoveStateEvent">
            <summary>
            Event that causes the user's move to miss if it contains one of the specified SkillStates
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EvadeMoveStateEvent.States">
            <summary>
            The list of valid SkillStates types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EvadeMoveStateEvent.Anims">
            <summary>
            The list of battle VFXs played if the move type matches
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CustomHitRateEvent">
            <summary>
            Event that causes the action to miss given the specified chance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CustomHitRateEvent.Numerator">
            <summary>
            The numerator of the chance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CustomHitRateEvent.Denominator">
            <summary>
            The denominator of the chance
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeDistanceEvent">
            <summary>
            Event that causes the user's move to miss if the target is more than 1 tile away
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EvadeDistanceEvent.Inverted">
            <summary>
            Whether to check if the user is within 1 tile
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SureShotEvent">
            <summary>
            Event that causes the action to always hit
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SkillLinkEvent">
            <summary>
            Event that causes the multi-strike moves to always hit
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeCategoryEvent">
            <summary>
            Event that causes the user to avoid moves of the specified skill category and alignment
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EvadeCategoryEvent.EvadeAlignment">
            <summary>
            The affected alignments
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EvadeCategoryEvent.Category">
            <summary>
            The affected skill category
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.EvadeCategoryEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TelepathyEvent">
            <summary>
            Event that causes the user to avoid damaging moves of friendly targets
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NontraitorEvent">
            <summary>
            Event that causes the user moves to not affect friendly targets
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GapProberEvent">
            <summary>
            Event that causes damaging battle actions that hit in a straight line to not affect friendly targets
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiplyAccuracyEvent">
            <summary>
            Event that modifies the accuracy rate
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AddRangeEvent">
            <summary>
            Event that modifies the range
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AddRangeEvent.Range">
            <summary>
            The range modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ElementAddRangeEvent">
            <summary>
            Event that modifies the range if the user is the specified type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementAddRangeEvent.Elements">
            <summary>
            The list of valid types
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BoostCriticalEvent">
            <summary>
            Event that boosts the critical chance rate
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BoostCriticalEvent.AddCrit">
            <summary>
            The modified critical chance rate
            1 - 25%
            2 - 50%
            3 - 75%
            4 - 100%
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BlockCriticalEvent">
            <summary>
            Event that sets the critical rate chance to 0
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BoostAdditionalEvent">
            <summary>
            Event that boosts the rate in the AdditionalEffectState skill state
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BlockAdditionalEvent">
            <summary>
            Event that sets the rate in the AdditionalEffectState skill state to 0
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SheerForceEvent">
            <summary>
            Event that sets the rate in the AdditionalEffectState skill state to 0 and boosts the damage multiplier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LongRangeGuardEvent">
            <summary>
            Event that causes the move to miss if the range of the move is greater than the specified amount
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WideGuardEvent">
            <summary>
            Event that causes the move to miss if the move is wide or an explosion
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WideGuardEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ThrowItemDestroyEvent">
            <summary>
            Event that modifies the battle data if the character is hit by an item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ThrowItemDestroyEvent.NewData">
            <summary>
            Events that occur when hit by an item
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ThrowItemPreventDropEvent">
            <summary>
            Event that prevents item of dropping by setting ItemDestroyed global context state
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DistanceDropEvent">
            <summary>
            Event that prevents item of dropping by setting ItemDestroyed global context state
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EvadeIfPossibleEvent">
            <summary>
            Event that causes the battle action to miss if the attacker isn't due for a sure hit.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TipOnlyEvent">
            <summary>
            Event that causes the battle action to miss if it isn't used at max distance.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DistanceOnlyEvent">
            <summary>
            Event that causes the battle action to miss if the user is the next to the target.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TipPowerEvent">
            <summary>
            Event that boosts the battle action damage multiplier the further away the user is from the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CounterTypeEvent">
            <summary>
            Event that reflects damage back to the user if the move type matches the specified type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterTypeEvent.Numerator">
            <summary>
            The numerator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterTypeEvent.Denominator">
            <summary>
            The denominator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterTypeEvent.CounterElement">
            <summary>
            The type reflected
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CounterCategoryEvent">
            <summary>
            Event that reflects damage back to the user if the action's skill category matches the specified skill category
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterCategoryEvent.Numerator">
            <summary>
            The numerator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterCategoryEvent.Denominator">
            <summary>
            The denominator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterCategoryEvent.Category">
            <summary>
            The skill cateogory affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterCategoryEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CounterNonSkillEvent">
            <summary>
            Event that reflects damage back to the user if the battle action was a regular attack or thrown item.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterNonSkillEvent.Numerator">
            <summary>
            The numerator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterNonSkillEvent.Denominator">
            <summary>
            The denominator of the damage reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterNonSkillEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CounterHealEvent">
            <summary>
            Event that reflects the HP healed back to the user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterHealEvent.Numerator">
            <summary>
            The numerator of the HP reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterHealEvent.Denominator">
            <summary>
            The denominator of the HP reflected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterHealEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreserveTurnEvent">
            <summary>
            Event that allows the user to move again
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreserveTurnEvent.Msg">
            <summary>
            The message displayed in the dungeon log  
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreserveTurnEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BounceStatusEvent">
            <summary>
            Event that bounces status conditions move back to the user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BounceStatusEvent.Msg">
            <summary>
            The message displayed in the dungeon log
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BounceStatusEvent.StatusOnly">
            <summary>
            Only status effects, not all status moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BounceStatusEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GrudgeEvent">
            <summary>
            Event that subtracts PP from all the user's move if the target was dealt damage by a move
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PressureEvent">
            <summary>
            Event that increases the user's move PP usage by the specified amount 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PressureEvent.Amount">
            <summary>
            The increased PP usage amount
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CurseEvent">
            <summary>
            Event that inflicts damage to the character based on the HP in the HPState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CurseEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ExceptionContextEvent">
            <summary>
            Event that activates if the battle actions contains one of the specified ContextState 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionContextEvent.States">
            <summary>
            The list of valid ContextState types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionContextEvent.Global">
            <summary>
            Whether to to check in the global context states
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionContextEvent.BaseEvent">
            <summary>
            Battle event that applies if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ExceptInfiltratorEvent">
            <summary>
            Event that activates if the the user doesn't have the Infiltrator context state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptInfiltratorEvent.ExceptionMsg">
            <summary>
            Whether to log the Infiltrator pass through message
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptInfiltratorEvent.BaseEvents">
            <summary>
            The list of battle events applied if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ExceptionCharStateEvent">
            <summary>
            Event that plays if the battle actions contains one of the specified CharState 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionCharStateEvent.States">
            <summary>
            The list of valid CharState types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionCharStateEvent.CheckTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionCharStateEvent.BaseEvent">
            <summary>
            Battle event that applies if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FullEndureEvent">
            <summary>
            Event that sets the AttackEndure context state if the character is at full HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EndureCategoryEvent">
            <summary>
            Event that sets the AttackEndure context state if the character is hit by the specified skill category
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EndureCategoryEvent.Category">
            <summary>
            The affected skill category
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EndureElementEvent">
            <summary>
            Event that sets the AttackEndure context state if the character is hit by the specified move type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.EndureElementEvent.Element">
            <summary>
            The affected move type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MultiScaleEvent">
            <summary>
            Event that modifies the damage multiplier if the character is at full HP
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MultiScaleEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreventActionEvent">
            <summary>
            Event that prevents the character from doing certain battle action types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventActionEvent.Actions">
            <summary>
            The list of battle action type that the character cannot do
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventActionEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreventItemActionEvent">
            <summary>
            Event that prevents the character from using items unless the item contains the one of the specified item states
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemActionEvent.ExceptTypes">
            <summary>
            The list of valid ItemState types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemActionEvent.Message">
            <summary>
            The message displayed in the dungeon log if the condition is not met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreventItemParalysisEvent">
            <summary>
            Event that prevents the character from using items if they are paralyzed
            unless the item contains the one of the specified item states
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemParalysisEvent.ExceptTypes">
            <summary>
            The list of valid ItemState types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemParalysisEvent.Message">
            <summary>
            The message displayed in the dungeon log if the condition is not met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreventItemUseEvent">
            <summary>
            Event that prevents the character from using items if the item contains the one of the specified item states
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemUseEvent.UseTypes">
            <summary>
            The list of valid ItemState types
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemUseEvent.Message">
            <summary>
            The message displayed in the dungeon log if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CheckItemActiveEvent">
            <summary>
            Event that prevents the character from using the item if the item's HiddenValue is set
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PreventItemIndexEvent">
            <summary>
            Event that prevents the character from using certain items
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemIndexEvent.UseTypes">
            <summary>
            The list of items the character cannot use
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PreventItemIndexEvent.Message">
            <summary>
            The message displayed in the dungeon log if the character cannot use the item
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DodgeFoodEvent">
            <summary>
            Event that causes the character to dodge items that contain the EdibleState item state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DodgeFoodEvent.Message">
            <summary>
            The message displayed in the dungeon log if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HPActionCheckEvent">
            <summary>
            Event that prevents the character from taking action if they are below the specified HP threshold
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPActionCheckEvent.HPFraction">
            <summary>
            The HP threshold given as 1/HPFraction
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TraitorEvent">
            <summary>
            Event that causes battle actions that target foes to also hit friendly targets and vice versa.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ForceMoveEvent">
            <summary>
            Event that forces the character to use the specified move
            Usually used for moves that charge up
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ForceMoveEvent.MoveIndex">
            <summary>
            The move ID
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChargeCustomEvent">
            <summary>
            Event tha changes the hitbox action, explosion data, and battle data
            if the MoveCharge context state is not present
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChargeCustomEvent.HitboxAction">
            <summary>
            The alternate hitbox action
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChargeCustomEvent.Explosion">
            <summary>
            The alternate explosion data
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChargeCustomEvent.NewData">
            <summary>
            The alternate battle data
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChargeOrReleaseEvent">
            <summary>
            Event that sets the specified charge status and alternate hitbox action
            if the MoveCharge context state is not present
            Usually used for moves that charge up
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChargeOrReleaseEvent.ChargeStatus">
            <summary>
            The status representing the move charging up
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChargeOrReleaseEvent.HitboxAction">
            <summary>
            Alternate data on the hitbox of the attack. Controls range and targeting
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BideOrReleaseEvent">
            <summary>
            Event that sets the specified charge status if the MoveCharge context state is not present
            Used specifically for the move Bide
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BideOrReleaseEvent.ChargeStatus">
            <summary>
            The status representing the move charging up
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BideOrReleaseEvent.IntroEmitter">
            <summary>
            The particle VFX
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BideOrReleaseEvent.IntroSound">
            <summary>
            The sound effect of the VFX
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WatchOrStrikeEvent">
            <summary>
            Event that sets the specified charge status if the FollowUp context state is not present
            Used specifically for the moves Retaliate and Fire/Water/Grass Pledge
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WatchOrStrikeEvent.ChargeStatus">
            <summary>
            The status representing the move charging up
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WatchOrStrikeEvent.IntroEmitter">
            <summary>
            The particle VFX
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WatchOrStrikeEvent.IntroSound">
            <summary>
            The sound effect of the VFX
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HitPostEvent">
            <summary>
            Event that increments the AttackHitTotal global context state,
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AffectHighestStatBattleEvent">
            <summary>
            Event that increments the AttackHitTotal global context state
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DownloadEvent">
            <summary>
            Event that raises the Attack or 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RaiseOneLowerOneEvent">
            <summary>
            Event that raises one stat by one and lowers the other stat by one
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RaiseOneLowerOneEvent.RaiseID">
            <summary>
            The stat raised
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RaiseOneLowerOneEvent.LowerID">
            <summary>
            The stat lowered
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RaiseOneLowerOneEvent.Message">
            <summary>
            The message displayed in the dungeon log
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MoodyEvent">
            <summary>
            Event that raises one stat by one and lowers the other stat by one
            depending on whether the involved attack is special or physical
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MoodyEvent.OnPhysicalID">
            <summary>
            The status raised if the involved attack is physical, otherwise lowered
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MoodyEvent.OnSpecialID">
            <summary>
            The status raised if the involved attack is special, otherwise lowered
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CheckImmunityBattleEvent">
            <summary>
            Event that applies if the target is not immune to the specified type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CheckImmunityBattleEvent.Element">
            <summary>
            The type to check immunity from
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CheckImmunityBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CheckImmunityBattleEvent.BaseEvents">
            <summary>
            The list of battle events applied if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveOnDamageEvent">
            <summary>
            Event used specifically by statuses and removes itself when the character receives damage
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SemiInvulEvent">
            <summary>
            Event that causes the specified list of move to always hit while all other moves will miss.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SemiInvulEvent.ExceptionMoves">
            <summary>
            The list of valid of moves that will always hit
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BideEvent">
            <summary>
            Event that increases the HP in the HPState status state by the damage received
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.UnleashEvent">
            <summary>
            Event that unleases double the damage in HPState status state when the CountDownState status state reaches 0
            Used by the Biding status
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CantAttackTargetEvent">
            <summary>
            Event that makes the user cannot target the enemy that used the status
            This event can only be used in statuses
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CantAttackTargetEvent.Invert">
            <summary>
            Whether to force the user to target the enemy instead
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.CantAttackTargetEvent.Message">
            <summary>
            The message displayed in the dungeon log if the condition is met
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.ForceFaceTargetEvent">
            <summary>
            Event that sets the user direction to face the enemy
            This event can only be used in statuses 
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.DestinyBondEvent">
            <summary>
            Event that deals damage to the character if the enemy that used the status also takes damage
            This event can only be used in statuses  
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.SleepEvent">
            <summary>
            Event that prevents the character from taking action 
            This event can only be used in statuses  
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.BoundEvent">
            <summary>
            Event that displays a message if the character does not have the BoundAttack context state
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.RemoveRecentEvent">
            <summary>
            Event that removes the RecentState status state
            This event can only be used on statuses 
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.ForceWakeEvent">
            <summary>
            Event that sets the CountDownState counter to 0 if the character receives any damage
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.ThawEvent">
            <summary>
            Event that thaws the character if the targeting move is a fire-type 
            Otherwise, that move will miss
            This event can only be used on statuses 
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.ParalysisEvent">
            <summary>
            Event that prevents the character from taking action if the ParalyzeState is recent
            This event can only be used on statuses 
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.ParalysisEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PoisonEvent">
            <summary>
            Event that inflicts damage based on the character max HP
            This event can only be used on statuses 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PoisonEvent.Toxic">
            <summary>
            Whether the character is badly poisoned or not
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AttackedThisTurnEvent">
            <summary>
            Event that sets the AttackedThisTurnState status state to be true, indicating that the character attacked this turn
            This event can only be used on statuses
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GummiEvent">
            <summary>
            Event that boosts the character's stat depending on the effectiveness of the specified type to the character's type.
            Super effective: Defense and Special Defense
            Not effective: Attack and Special Attack
            Neutral: Speed and HP
            Same type: Boost all stats
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GummiEvent.TargetElement">
            <summary>
            The gummi type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GummiEvent.RequireBase">
            <summary>
            If checked, must be base type not current type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.VitaGummiEvent">
            <summary>
            Normally raises one stat. Also raises other stats if matching type.
            Matching = main stat + 2, other stats + 1, 
            Super-effective = main stat + 2, two other stats (top 2 of the species) + 1
            Normal effect = main stat + 2
            NVE = main stat + 1
            Immune = nothing
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaGummiEvent.TargetElement">
            <summary>
            The gummi type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaGummiEvent.RequireBase">
            <summary>
            If checked, must be base type not current type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaGummiEvent.BoostedStat">
            <summary>
            The stat to boost
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaGummiEvent.FullEffect">
            <summary>
            If checked, changes super-effective and matching type to the following:
            Matching = All stats + 2
            Super-effective = main stat + 2, other stats + 1
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.VitaminEvent">
            <summary>
            Event that boosts the specified stat by the specified amount
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaminEvent.BoostedStat">
            <summary>
            The stat to boost
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaminEvent.Change">
            <summary>
            The boost amount 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.VitaminEvent.ForceDiff">
            <summary>
            If the stat didn't change, keep adding to the stat until it does.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LevelChangeEvent">
            <summary>
            Event that changes the character's level by the specified amount 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.LevelChangeEvent.Level">
            <summary>
            The level change
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.LevelChangeEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DamageEXPEvent">
            <summary>
            Event that adds EXP to the character based on the damage dealt
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ToggleEXPEvent">
            <summary>
            Event that marks whether EXP can be gained from the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ToggleEXPEvent.EXPMarked">
            <summary>
            Whether to make target EXP marked or not
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DefeatedMoneyEvent">
            <summary>
            Event that causes the target to drop money when defeated
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DamageMoneyEvent">
            <summary>
            Event that causes the target to drop money based on the damage dealt
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DamageMoneyEvent.Multiplier">
            <summary>
            The drop money mutliplier given by the damage dealt times the multiplier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.KnockMoneyEvent">
            <summary>
            Event that causes the target to drop a portion of the its money
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.KnockMoneyEvent.Multiplier">
            <summary>
            The money lost multipler given by the formula, (Multiplier - 1) / Multiplier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HiddenPowerEvent">
            <summary>
            Event that changes the move type depending on the map seed and the unique character ID
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MatchAttackToTypeEvent">
            <summary>
            Event that changes the move to the character's primary type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ItemPowerEvent">
            <summary>
            Event that changes the move type depending on the character's held item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemPowerEvent.ItemPair">
            <summary>
            The item ID mapped to a type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeightBasePowerEvent">
            <summary>
            Event that modifies the base power of the move depending on the weight of the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatBasePowerEvent">
            <summary>
            Event that boosts the power of moves depending on the total stat changes
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatBasePowerEvent.AddedPower">
            <summary>
            The base power for each stat change
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatBasePowerEvent.FromTarget">
            <summary>
            Whether to check the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HPBasePowerEvent">
            <summary>
            Event that makes a move deal more or less damage depending on the character's HP
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPBasePowerEvent.MaxPower">
            <summary>
            The max base power of the move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPBasePowerEvent.Reverse">
            <summary>
            Whether or not the less HP the character has, the more damage 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPBasePowerEvent.FromTarget">
            <summary>
            Whether to calculate the power target or user HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PPBasePowerEvent">
            <summary>
            Event that makes a move deal more or less damage depending on the PP amount 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PPBasePowerEvent.MaxPower">
            <summary>
            The max base power of the move
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.PPBasePowerEvent.Reverse">
            <summary>
            Whether or not the less PP, the more damage
            </summary>  
        </member>
        <member name="F:PMDC.Dungeon.PPBasePowerEvent.Total">
            <summary>
            Whether to also consider the PP of other moves
            </summary>  
        </member>
        <member name="T:PMDC.Dungeon.AllyBasePowerEvent">
            <summary>
            Event that modifies the base power of the move based on the number of allies around the character 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AllyBasePowerEvent.Reverse">
            <summary>
            Whether or not the more allies, the less damage 
            </summary>  
        </member>
        <member name="T:PMDC.Dungeon.SpeedPowerEvent">
            <summary>
            Event that modifies the base power of the move based on the movement speed differences
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpeedPowerEvent.Reverse">
            <summary>
            Whether the less movement speed the user has, the more damage
            </summary>  
        </member>
        <member name="T:PMDC.Dungeon.WeightCrushBasePowerEvent">
            <summary>
            Event that increases the base power of the move based on the weight ratio difference 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RevengeEvent">
            <summary>
            Event that modifies the damage multiplier if the target in the status matches the enemy
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RevengeEvent.TargetStatusID">
            <summary>
            The status which contains the target
            Should usally be "last targeted by"
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.RevengeEvent.Numerator">
            <summary>
            Numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RevengeEvent.Denominator">
            <summary>
            Denominator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RevengeEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RevengeEvent.Msg">
            <summary>
            Whether to display the message associated with this event
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.HasStatusNeededEvent">
            <summary>
            Event that activiates if the character has one of the specified statuses
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HasStatusNeededEvent.Statuses">
            <summary>
            The list of valid status IDs 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HasStatusNeededEvent.AffectTarget">
            <summary>
            Whether to check the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HasStatusNeededEvent.BaseEvents">
            <summary>
            The list of battle events that plays if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetStatusNeededEvent">
            <summary>
            Event that causes the battle action to miss if the character doesn't have the specified status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetStatusNeededEvent.StatusID">
            <summary>
            The status ID to check for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetStatusNeededEvent.AffectTarget">
            <summary>
            Whether to check the status on the target or user 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetStatusNeededEvent.Message">
            <summary>
            The message displayed in the dungeon log if the conditon is met 
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.StatusNeededEvent">
            <summary>
            Event that prevents the character from using the move if the specified status is not present
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.StatusNeededEvent.StatusID">
            <summary>
            The status ID to check for
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.StatusNeededEvent.Message">
            <summary>
            The message displayed in the dungeon log if the conditon is met 
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.MajorStatusPowerEvent">
            <summary>
            Event that modifies the damage multiplier if the character is inflicted with a major status condition
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.MajorStatusPowerEvent.AffectTarget">
            <summary>
            Whether to check the status on the target or user
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.MajorStatusPowerEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MajorStatusPowerEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusPowerEvent">
            <summary>
            Event that modifies the base power of the move if the character is inflicted with the specified status 
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.StatusPowerEvent.StatusID">
            <summary>
            The status ID to check for
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.StatusPowerEvent.AffectTarget">
            <summary>
            Whether to check the status on the target or user
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.SynchroTypeEvent">
            <summary>
            Event that modifies the damage multiplier if the user's type matches the target's
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.BrineEvent">
            <summary>
            Event that modifies the base power of the move if the target's HP is below the specified threshold
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.AcrobaticEvent">
            <summary>
            Event that modifies the base power of the move if the user isn't holding an item
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.AddContextStateEvent">
            <summary>
            Event that adds the specified context state 
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.AddContextStateEvent.AddedState">
            <summary>
            The context state to add
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.AddContextStateEvent.Global">
            <summary>
            Whether to add the context state globally
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.MessageOnceEvent">
            <summary>
            Event that displays a message to the dungeon log once
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.MessageOnceEvent.AddedState">
            <summary>
            The context state added to indicate if the message was displayed
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.MessageOnceEvent.Global">
            <summary>
            Whether to add the context state globally 
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.MessageOnceEvent.AffectTarget">
            <summary>
            Whether to display the target or user name in the message
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.MessageOnceEvent.Message">
            <summary>
            The message displayed in the dungeon log if the conditon is met 
            </summary>  
        </member>
        <member name="F:PMDC.Dungeon.MessageOnceEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FlipCategoryEvent">
            <summary>
            Event that changes physical attack to special and vice versa
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.FlipCategoryEvent.MidwayCross">
            <summary>
            Whether this is being applied before or after the user's stat calculation.
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.SpeedReverseHitEvent">
            <summary>
            Event that reverses the effect that speed has on hit and dodge rate.
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.FoulPlayEvent">
            <summary>
            Event that uses the target's attack stat to calculate the damage
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.IgnoreStatsEvent">
            <summary>
            Event that ignores any stat boosts the character has
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.IgnoreStatsEvent.AffectTarget">
            <summary>
            Whether to ignore the target or user stat boosts
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.IgnoreHaxEvent">
            <summary>
            Event that ignores the user's accuracy descrease and target's evasive boosts
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.OHKODamageEvent">
            <summary>
            Event that OHKOs the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DamageFormulaEvent">
            <summary>
            Event that calculates the damage of the action, taking account into effectiveness, critical hits, stat boosts, and STAB
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpecificDamageEvent">
            <summary>
            Event that sets the specified damage the character will take 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpecificDamageEvent.Damage">
            <summary>
            The damage amount
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LevelDamageEvent">
            <summary>
            Event that calculates the damage based on the character's level
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.LevelDamageEvent.AffectTarget">
            <summary>
            Whether to calculate with the target or user's level
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.LevelDamageEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.LevelDamageEvent.Denominator">
            <summary>
            The denominator of the modifier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PsywaveDamageEvent">
            <summary>
            Event that deals fixed damage depending on the target's distance from the attack and the user's level
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.UserHPDamageEvent">
            <summary>
            Event that deals fixed damage based on the user's current HP.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.UserHPDamageEvent.Reverse">
            <summary>
            Instead, deal damage based on the HP the user is missing.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.EndeavorEvent">
            <summary>
            Event that reduces the target's HP to the user's HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CutHPDamageEvent">
            <summary>
            Event that reduces the target's HP by half
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MaxHPDamageEvent">
            <summary>
            Event that reduces the target's HP by the specified HP fraction 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GroupEvent">
            <summary>
            Event that groups multiple battle events into one event
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GroupEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChooseOneEvent">
            <summary>
            Event that chooses a random battle event
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChooseOneEvent.BaseEvents">
            <summary>
            The list of battle events to choose from
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AdditionalEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if damage was dealt
            and passes the AdditionalEffectState chance check
            This event should be placed in OnHits
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AdditionalEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AdditionalEndEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if damage was dealt
            and passes the AdditionalEffectState chance check
            This event should be placed in AfterActions
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AdditionalEndEvent.BaseEvents">
            <summary>
            The list of battle events that will be applie if the condition is metd
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetDeadNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the target dead 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetDeadNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applie if the condition is metd
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.KnockOutNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the user knocks out the target 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.KnockOutNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applie if the condition is metd
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FoodNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies
            if the character uses an item with the EdibleState item state 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeatherNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the specified map status is present 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherNeededEvent.WeatherID">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeatherRequiredEvent">
            <summary>
            Event that prevents the character from using the move if the specified map status is not present
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.WeatherRequiredEvent.WeatherID">
            <summary>
            The status ID to check for
            </summary> 
        </member>
        <member name="F:PMDC.Dungeon.WeatherRequiredEvent.Message">
            <summary>
            The message displayed in the dungeon log if the conditon is met 
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.CritNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if a critical hit was landed 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CritNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CharElementNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the target's type matches the specified type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CharElementNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CharElementNeededEvent.NeededElement">
            <summary>
            The type to check for 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ElementNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the move type matches the specified type 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ElementNeededEvent.NeededElement">
            <summary>
            The type to check for 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CategoryNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the action matches the skill category 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CategoryNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CategoryNeededEvent.NeededCategory">
            <summary>
            The skill category to check for 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AttackingMoveNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if an attacking move is used
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AttackingMoveNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnActionEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies on action
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnActionEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnAggressionEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies when the character attacks
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnAggressionEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnMoveUseEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the character uses a move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnMoveUseEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies
            when the target matches the one of the specified alignments
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetNeededEvent.Target">
            <summary>
            The alignments to check for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TargetNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnSelfActionEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies when the hitbox action is a SelfAction
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnSelfActionEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GiveStatusNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if a StatusBattleEvent was used
            and its status matches one of the specified status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GiveStatusNeededEvent.Statuses">
            <summary>
            The list of statuses to check for 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GiveStatusNeededEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SnapDashBackEvent">
            <summary>
            Event that makes the character return to its original position after a dash action
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnDashActionEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the hitbox action is a DashAction 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnDashActionEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnMeleeActionEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the hitbox action is a MeleeAction or DashAction 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnMeleeActionEvent.Invert">
            <summary>
            Whether to check for any other hitbox action instead
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnMeleeActionEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpecificSkillNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the move mathces one of the specfied moves
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpecificSkillNeededEvent.BaseEvent">
            <summary>
            The battle event that applies if the condition is met
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpecificSkillNeededEvent.AcceptedMoves">
            <summary>
            The list of moves to check for 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RegularAttackNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the action is a regular attack
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RegularAttackNeededEvent.BaseEvent">
            <summary>
            The battle event that applies if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WandAttackNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the used item has the WandState item state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WandAttackNeededEvent.BaseEvent">
            <summary>
            The battle event that applies if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ThrownItemNeededEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if an item was thrown 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ThrownItemNeededEvent.BaseEvent">
            <summary>
            The battle event that applies if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnHitEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the user lands a hit on an enemy
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnHitEvent.BaseEvents">
            <summary>
            The battle event that will be applied if the condition is met 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.OnHitAnyEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the character lands a hit on anyone
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnHitAnyEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnHitAnyEvent.RequireDamage">
            <summary>
            Whether the hit needs to deal damage
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.OnHitAnyEvent.Chance">
            <summary>
            The chance for the events to apply (0, 100)
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HitCounterEvent">
            <summary>
            Event that groups multiple battle events into one event, but only applies if the character is hit
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HitCounterEvent.BaseEvents">
            <summary>
            The list of battle events that will be applied if the condition is met 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HitCounterEvent.Targets">
            <summary>
            The alignments that can be affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HitCounterEvent.RequireDamage">
            <summary>
            Whether the hit needs to deal damage
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HitCounterEvent.RequireContact">
            <summary>
            Whether the move needs to contain the ContactState skill state 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HitCounterEvent.RequireSurvive">
            <summary>
            Whether the move needs to contain the ContactState skill state 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HitCounterEvent.Chance">
            <summary>
            The chance for the events to apply (0, 100)
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusSpreadEvent">
            <summary>
            Event that causes the status to spread if the character makes contact
            This event can only be used on statuses
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusSpreadEvent.AffectTarget">
            <summary>
            Whether to apply the status to the user or target
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.SkyDropStatusBattleEvent">
            <summary>
            Event that make the user drop the target by applying the original status and if successful, applies the alternate status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SkyDropStatusBattleEvent.AltStatusID">
            <summary>
            The alternate status to apply 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CoupledStatusBattleEvent">
            <summary>
            Event that applies the original status and if successful, applies the alternate status 
            This event can only be used on statuses
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CoupledStatusBattleEvent.AltStatusID">
            <summary>
            The alternate status to apply
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusBattleEvent">
            <summary>
            Event that applies a status to the character
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusBattleEvent.StatusID">
            <summary>
            The status to apply
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusBattleEvent.SilentCheck">
            <summary>
            Whether to display a message if the status fails to apply
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusBattleEvent.Anonymous">
            <summary>
            Whether to include the user of the status in the context
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusBattleEvent.TriggerMsg">
            <summary>
            The message displayed in the dungeon log if the status is triggered
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusBattleEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.StatusStackBattleEvent">
            <summary>
            Event that adds or substracts the stack amount of a status. 
            This is usually used for stat boosts stauses such as attack, defense, evasiveness, etc.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusStackBattleEvent.Stack">
            <summary>
            The amount to add or subtract by
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusElementBattleEvent">
            <summary>
            Event that adds the specified type to the ElementState status state when the status is applied
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusElementBattleEvent.Element">
            <summary>
            The type to add to ElementState
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusStateBattleEvent">
            <summary>
            Event that adds status states when the status is applied
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DisableBattleEvent">
            <summary>
            Event that disables a move slot by using the value in the SlotState status state in the specified status when the status is applied
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DisableBattleEvent.LastSlotStatusID">
            <summary>
            The status containing the SlotState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DisableBattleEvent.RandomFallback">
            <summary>
            UNUSED
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CounterDisableBattleEvent">
            <summary>
            Event that sets the value in the SlotState based on what move slot was used when the status is applied
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeatherStackEvent">
            <summary>
            Event that increases the stack amount of a status if the map status is present
            This is usually used for stat boosts stauses such as attack, defense, evasiveness, etc.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherStackEvent.WeatherID">
            <summary>
            The map status to check for
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatusHPBattleEvent">
            <summary>
            Event that sets the HPState based on the character's max HP divided by the specified denominator 
            This is usually used for stat boosts stauses such as attack, defense, evasiveness, etc.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatusHPBattleEvent.HPFraction">
            <summary>
            The value to divide the max HP by
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FutureAttackEvent">
            <summary>
            Event that calculates the damage done to the character and sets the value in the HPState status state
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GiveContinuousDamageEvent">
            <summary>
            Event that checks the damage done to the character and sets the value in the HPState status state 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NatureSpecialEvent">
            <summary>
            Event that maps the current map status to a battle event.
            If there is no match, it maps the current map type to a battle event.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NatureSpecialEvent.TerrainPair">
            <summary>
            The map status mapped to a battle event
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NatureSpecialEvent.NaturePair">
            <summary>
            The type mapped to a battle event
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.GiveMapStatusEvent">
            <summary>
            Event that sets the specified map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GiveMapStatusEvent.StatusID">
            <summary>
            The map status to add
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GiveMapStatusEvent.Counter">
            <summary>
            The amount of turns the map status will last
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GiveMapStatusEvent.MsgOverride">
            <summary>
            The message displayed in the dungeon log when the map status is added
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.GiveMapStatusEvent.States">
            <summary>
            If the user contains one of the specified CharStates, then the weather is extended by the multiplier
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveWeatherEvent">
            <summary>
            Event that removes all the map statuses 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TypeWeatherEvent">
            <summary>
            Event that sets the map status depending on the user's type 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TypeWeatherEvent.WeatherPair">
            <summary>
            The element that maps to a map status. 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BanMoveEvent">
            <summary>
            Event that bans the last move the character used by setting the move ID in the MapIDState
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BanMoveEvent.BanStatusID">
            <summary>
            The status that will store the move ID in MapIDState
            This should usually be "move_ban" 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BanMoveEvent.LastMoveStatusID">
            <summary>
            The status that contains the last used move in IDState status state
            This should usually be "last_used_move"
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SketchBattleEvent">
            <summary>
            Event that makes the user learn the last used moved of the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SketchBattleEvent.LastMoveStatusID">
            <summary>
            The status that contains the last used move in IDState status state
            This should usually be "last_used_move"
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MimicBattleEvent">
            <summary>
            Event that makes the user learn the last used moved of the target until the next floor
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HPDrainEvent">
            <summary>
            Event that restores the user's HP based on the damage the move dealt 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPDrainEvent.DrainFraction">
            <summary>
            The amount of HP restored calculated by damage dealt divided by this value
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AdNihiloEvent">
            <summary>
            Event that removes all stat boosts and damages the character for each stat boost
            Stat drops will heal the character instead
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AdNihiloEvent.States">
            <summary>
            If the status contains the one of the specified status states, then it's stack amount will be considered in the calculation
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AdNihiloEvent.Denominator">
            <summary>
            The denominator of the damage or heal
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AdNihiloEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RestoreHPEvent">
            <summary>
            Event that heals the character based on the specified fraction of the character's max HP 
            Stat drops will heal the character instead
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreHPEvent.Numerator">
            <summary>
            The numerator of the fraction
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreHPEvent.Denominator">
            <summary>
            The denominator of the fraction
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreHPEvent.AffectTarget">
            <summary>
            Whether to affect the target or user 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WeatherHPEvent">
            <summary>
            Event that heals the character depending on the map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherHPEvent.WeatherPair">
            <summary>
            The map status mapped to a bool
            The bool indicates whether the heal will be boosted or reduced 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WeatherHPEvent.HPDiv">
            <summary>
            The numerator of the fractional heal
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpiteEvent">
            <summary>
            Event that subtracts PP from the target if the user is hit by a move
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpiteEvent.LastSlotStatusID">
            <summary>
            The status that contains the last used move slot 
            This should usually be "last_used_move_slot"
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpiteEvent.PP">
            <summary>
            The amount of PP to subtract
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RestorePPEvent">
            <summary>
            Event that restores PP on all move slots
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestorePPEvent.PP">
            <summary>
            The amount of PP to restore
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RestoreBellyEvent">
            <summary>
            Event that restores or reduces the hunger of the character by the specified amount 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreBellyEvent.Heal">
            <summary>
            The amount of hunger to restore or reduce
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreBellyEvent.Msg">
            <summary>
            Whether to display the messages relating to hunger
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreBellyEvent.AddMaxBelly">
            <summary>
            The amount to increase or decrease the max hunger by
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestoreBellyEvent.NeedFullBelly">
            <summary>
            Whether full hunger is needed to add the max hunger amount
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveStatusBattleEvent">
            <summary>
            Event that removes the specified status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStatusBattleEvent.StatusID">
            <summary>
            The status to remove
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStatusBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveStatusStackBattleEvent">
            <summary>
            Event that removes all the stat changes for the specified stat
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStatusStackBattleEvent.StatusID">
            <summary>
            The status affected
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStatusStackBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStatusStackBattleEvent.Negative">
            <summary>
            If the stack amount is negative, then reset the stack amount
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStatusStackBattleEvent.Positive">
            <summary>
            If the stack amount is positive, then reset the stack amount
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ReverseStateStatusBattleEvent">
            <summary>
            Event that reverts the character's stat changes
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReverseStateStatusBattleEvent.States">
            <summary>
            If the status contains the one of the specified status states, then it's stack amount can be reverted
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReverseStateStatusBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReverseStateStatusBattleEvent.Msg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveStateStatusBattleEvent">
            <summary>
            Event that removes the status if the status contains the one of the specified status states
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStateStatusBattleEvent.States">
            <summary>
            The list of status states to check for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStateStatusBattleEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStateStatusBattleEvent.Msg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveStateStatusBattleEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveBattleEvent">
            <summary>
            Event that removes its status from the user 
            This event can only be used on statuses
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveBattleEvent.ShowMessage">
            <summary>
            Whether to display the message associated with this event
            </summary> 
        </member>
        <member name="T:PMDC.Dungeon.RemoveOnActionEvent">
            <summary>
            Event that removes its status if the user does an action 
            This event can only be used on statuses
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ExceptionStatusEvent">
            <summary>
            Event that applies a battle event if the status does not contain one of the specified status states 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionStatusEvent.States">
            <summary>
            The list of status states to check for
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ExceptionStatusEvent.BaseEvent">
            <summary>
            Battle event that applies if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CountDownOnActionEvent">
            <summary>
            Event that decreases the counter in the status's CountDownState when the character does an action
            The status is removed when the countdown reaches 0
            This event can only be used on statuses
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CountDownOnActionEvent.ShowMessage">
            <summary>
            Whether to display the message when the status is removed 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HealSurroundingsEvent">
            <summary>
            Event that removes any statuses with the BadStatusState status state of nearby characters 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HealSurroundingsEvent.Message">
            <summary>
            The message displayed if the bad status is cured
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HealSurroundingsEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DamageRecoilEvent">
            <summary>
            Event that recoil damage to the user based on how much damage was dealt
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DamageRecoilEvent.Fraction">
            <summary>
            The value dividing the total damage dealt representing the recoil damage
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HPRecoilEvent">
            <summary>
            Event that deals recoil damage to the user if the move landed
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPRecoilEvent.Fraction">
            <summary>
            The value dividing the user's HP representing the recoil damage
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPRecoilEvent.MaxHP">
            <summary>
            Whether to use the user's max HP or current HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CrashLandEvent">
            <summary>
            Event that deals recoil damage to the user if the move missed
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CrashLandEvent.HPFraction">
            <summary>
            The value dividing the user's max HP representing the recoil damage
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChipDamageEvent">
            <summary>
            Event that deals damage based on the specified fraction of the character's max HP 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChipDamageEvent.HPFraction">
            <summary>
            The value dividing the character's max HP
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChipDamageEvent.Msg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChipDamageEvent.VFX">
            <summary>
            Whether to play the VFX associated with this event
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChipDamageEvent.SkipAction">
            <summary>
            Whether to the skip the damage animation  
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.IndirectDamageEvent">
            <summary>
            Event that deals damage based on the specified fraction of the character's max HP
            This event should only be used on trap tiles
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.IndirectDamageEvent.HPFraction">
            <summary>
            The value dividing the character's max HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.IndirectElementDamageEvent">
            <summary>
            Event that deals damage based on the specified fraction of the character's max HP and the type effectiveness
            This event should only be used on trap tiles
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.IndirectElementDamageEvent.Element">
            <summary>
            The matchup type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.IndirectElementDamageEvent.HPFraction">
            <summary>
            The value dividing the character's max HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WrapTrapEvent">
            <summary>
            Event that deals damage based on the value in the HPState status state and skips the character's turn
            This event can only be used on statuses 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WrapTrapEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WrapTrapEvent.Anims">
            <summary>
            The list of battle VFXs played when the character is trapped
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WrapTrapEvent.CharAnim">
            <summary>
            The animation index played when the character is trapped
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HPTo1Event">
            <summary>
            Event the sets the character's HP to 1 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HPTo1Event.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PPTo1Event">
            <summary>
            Event the sets the PP of all the character's move to 1 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PPTo1Event.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HopEvent">
            <summary>
            Event that makes the user hop by the specified distance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HopEvent.Distance">
            <summary>
            The total distance to hop
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HopEvent.Reverse">
            <summary>
            Whether to hop forwards or backwards
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PounceEvent">
            <summary>
            Event that transport the user and nearby allies to the tile directly in front of another character or wall
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PounceEvent.AllyRadius">
            <summary>
            The radius that allies must be within in order to pounce
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LureEvent">
            <summary>
            Event that makes the target warp in front of the user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.KnockBackEvent">
            <summary>
            Event that knocks the target back by the specified distance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.KnockBackEvent.Distance">
            <summary>
            The distance to knock back
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ThrowBackEvent">
            <summary>
            Event that throws the target backwards by the specified distance 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ThrowBackEvent.Distance">
            <summary>
            The distance to throw the target back
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ThrowBackEvent.HitEvent">
            <summary>
            The event calculating how much damage the target will take
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ThrowBackEvent.ThrowTargetContext.Damage">
            <summary>
            The total damage the target will take
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LaunchAllEvent">
            <summary>
            Event that knocks back all characters within 1-tile away by the specified distance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.LaunchAllEvent.Distance">
            <summary>
            The distance to knock back
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RandomGroupWarpEvent">
            <summary>
            Event that warps a character and nearby allies to a random location within the specified distance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RandomGroupWarpEvent.Distance">
            <summary>
            The max warp distance 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RandomGroupWarpEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RandomWarpEvent">
            <summary>
            Event that warps a character to a random location within the specified distance
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RandomWarpEvent.Distance">
            <summary>
            The max warp distance 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RandomWarpEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RandomWarpEvent.TriggerMsg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WarpToEndEvent">
            <summary>
            Event that warps the character nearby the stairs
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpToEndEvent.Distance">
            <summary>
            The max warp distance to check for the end point
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpToEndEvent.DiffRange">
            <summary>
            The max distance away the character will be from the end point
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WarpHereEvent">
            <summary>
            Event that warps the user nearby the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpHereEvent.Msg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpHereEvent.AffectTarget">
            <summary>
            Whether to warp the target nearby the user
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WarpToAllyEvent">
            <summary>
            Event that warps the character to one of its nearby allies
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WarpAlliesInEvent">
            <summary>
            Event that warps allies to the user that are within the specified distance 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpAlliesInEvent.Distance">
            <summary>
            The max distance that allies can be summoned from
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpAlliesInEvent.Amount">
            <summary>
            The max amount of allies to summon
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpAlliesInEvent.FarthestFirst">
            <summary>
            Whether to warp the furthest allies
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpAlliesInEvent.SilentFail">
            <summary>
            Whether to print a fail message if no allies are warped
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpAlliesInEvent.Msg">
            <summary>
            The message displayed in the dungeon log if an ally was warped
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WarpFoesToTileEvent">
            <summary>
            Event that warps enemies to the user that are within the specified distance 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpFoesToTileEvent.Amount">
            <summary>
            The max amount of allies to summon
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.WarpFoesToTileEvent.Distance">
            <summary>
            The max distance that enemies can be summoned from
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SwitcherEvent">
            <summary>
            Event that causes the user to swap places with the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ItemRestoreEvent">
            <summary>
            Event that converts an item to another item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemRestoreEvent.HeldOnly">
            <summary>
            Whether or not the item needs to be held for the effect to work 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemRestoreEvent.ItemIndex">
            <summary>
            The item being converted
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemRestoreEvent.DefaultItems">
            <summary>
            The list of possible items to convert to 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PlateProtectEvent">
            <summary>
            Event that reduces the damage of a different type depending on the held item 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.PlateProtectEvent.TypePair">
            <summary>
            The item mapped to a type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FakeItemBattleEvent">
            <summary>
            Event that spawns an enemy from a fake item
            This should only be used in a MapEffectStep
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FakeItemBattleEvent.SpawnTable">
            <summary>
            The fake item mapped to an enemy
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemMetaEvent.TopDown">
            <summary>
            Whether to select the highest price item or not
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemMetaEvent.HeldOnly">
            <summary>
            Whether or not the item needs to be held for the effect to work 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemMetaEvent.PriorityItem">
            <summary>
            The item to check for first, regardless of price 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ItemMetaEvent.States">
            <summary>
            If the item has one of the specified ItemStates, then it be picked
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MugItemEvent">
            <summary>
            Event that pulls all items held by enemies to the user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MugItemEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MugItemEvent.SilentCheck">
            <summary>
            Whether to display a message if the item cannot be taken 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DropItemEvent">
            <summary>
            Event that causes the character to drop their item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DropItemEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DropItemEvent.SilentCheck">
            <summary>
            Whether to display a message if the item cannot be dropped
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.KnockItemEvent">
            <summary>
            Event that causes the target's item to fly off
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TransformItemEvent">
            <summary>
            Event that transforms the character's item to another item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransformItemEvent.NewItem">
            <summary>
            The item to transform to
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SetItemStickyEvent">
            <summary>
            Event that makes the character's item sticky or unsticks it
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SetItemStickyEvent.Sticky">
            <summary>
            Whether to make the item sticky or unsticks it
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DestroyItemEvent">
            <summary>
            Event that destroy the character's item
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StealItemEvent">
            <summary>
            Event the causes the user to steal the target's item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StealItemEvent.Message">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StealItemEvent.AffectTarget">
            <summary>
            Whether the character attacked instead steals the item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StealItemEvent.SilentCheck">
            <summary>
            Whether to display a message if the item cannot be dropped
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BegItemEvent">
            <summary>
            Event that causes the user to steal the target's item and replaced the item they are currently holding
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TrickItemEvent">
            <summary>
            Event that causes the user to exchange items with the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CleanseTeamEvent">
            <summary>
            Event that unsticks all the team's items. 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SwitchHeldItemEvent">
            <summary>
            Event that causes the user to exchange items with the target, unless the inventory is full
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.UseFoeItemEvent">
            <summary>
            Event that causes the character to use the enemy's item
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.UseFoeItemEvent.AffectTarget">
            <summary>
            Whether the attacker uses the held item. Otherwise, the enemy uses the attacker's held item.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.UseFoeItemEvent.SilentCheck">
            <summary>
            Whether to display a message if the item cannot be dropped
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HeldItemMoveEvent">
            <summary>
            Event that removes the user's held item and sets the item in the context
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BestowItemEvent">
            <summary>
            Event that causes the user to pass the held item to the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CatchItemEvent">
            <summary>
            Event that causes the character to equip the item in the BattleContext
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RestEvent">
            <summary>
            Event that applies the specified status to the character and restores them to full HP
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RestEvent.SleepID">
            <summary>
            The status to apply
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeToElementEvent">
            <summary>
            Event that converts the character to the specified type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeToElementEvent.TargetElement">
            <summary>
            The type to convert to
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AddElementEvent">
            <summary>
            Event that adds the specified type to the target's type
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AddElementEvent.TargetElement">
            <summary>
            The type to add
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveElementEvent">
            <summary>
            Event that removes the specified type from the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveElementEvent.TargetElement">
            <summary>
            The type to remove
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.NatureElementEvent">
            <summary>
            Event that changes the character's type based on the current map status
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.NatureElementEvent.TerrainPair">
            <summary>
            The map status mapped to a type
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeToAbilityEvent">
            <summary>
            Event that changes the character's ability to the specified ability
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeToAbilityEvent.TargetAbility">
            <summary>
            The ability to change to
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeToAbilityEvent.AffectTarget">
            <summary>
            Whether to affect the target or user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChangeToAbilityEvent.SilentCheck">
            <summary>
            Whether to display a message if the ability failed to change 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveAbilityEvent">
            <summary>
            Event that removes the specified ability of the character
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveAbilityEvent.TargetAbility">
            <summary>
            The ability to check for
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ReflectAbilityEvent">
            <summary>
            Event that causes the user copy the ability of the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectAbilityEvent.AffectTarget">
            <summary>
            Whether the target copies the ability of the user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectAbilityEvent.Msg">
            <summary>
            The message displayed in the dungeon log 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SwapAbilityEvent">
            <summary>
            Event that causes the user to swap abilities with the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PowerTrickEvent">
            <summary>
            Event that causes the character to swap its attack with its defense stats
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StatSplitEvent">
            <summary>
            Event that averages the defense or attack stats of the user and target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.StatSplitEvent.AttackStats">
            <summary>
            Whether to split the attack stats instead
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpeedSwapEvent">
            <summary>
            Event that causes the user to swap its speed stat with the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.PainSplitEvent">
            <summary>
            Event that adds the user's and target's HP, then splits the combined HP
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ReflectStatsEvent">
            <summary>
            Event that causes the user to copy the stat boosts/drops of the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ReflectStatsEvent.StatusIDs">
            <summary>
            The list of stats to copy from the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SwapStatsEvent">
            <summary>
            Event that causes the user to swap stat changes with the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SwapStatsEvent.StatusIDs">
            <summary>
            The list of stats swap with the target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TransferStatusEvent">
            <summary>
            Event that causes the user to transfer statuses to the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransferStatusEvent.Remove">
            <summary>
            Whether to remove the original statuses from the user
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransferStatusEvent.MajorStatus">
            <summary>
            Whether to transfer statuses that have the MajorStatusState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransferStatusEvent.MinorStatus">
            <summary>
            Whether to transfer statuses that have the MajorStatusState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransferStatusEvent.BadStatus">
            <summary>
            Whether to transfer statuses that have the BadStatusState status state
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransferStatusEvent.GoodStatus">
            <summary>
            Whether to transfer good statuses
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RestoreFormEvent">
            <summary>
            Event that restores the character back to its original form
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TransformEvent">
            <summary>
            Event that causes the user to transform to the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransformEvent.AffectTarget">
            <summary>
            Whether the target transforms to the user instead
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TransformEvent.StatusID">
            <summary>
            The transformed status
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DevolveEvent">
            <summary>
            Event that devolves the target
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DevolveEvent.SilentCheck">
            <summary>
            Whether to display a message if the target cannot devolve
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DevolveEvent.Anims">
            <summary>
            The list of battle VFXs played if the condition is met
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ItemizerEvent">
            <summary>
            Event that turns the target into an item from the current map's spawn pool
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LandItemEvent">
            <summary>
            Event that causes the item to land where the strike hitbox ended
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TrawlEvent">
            <summary>
            Event that pulls unclaimed items on the floor to the user.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LuminousEvent">
            <summary>
            Event that sets the character and tile sight to be clear
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MapOutEvent">
            <summary>
            Event that hints all unexplored locations on the map
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MapOutRadiusEvent">
            <summary>
            Event that hints all unexplored locations on the map within the specified radius
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MapOutRadiusEvent.Radius">
            <summary>
            The radius around the user to hint
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TilePostEvent">
            <summary>
            Event that reveals the tile and queues its affects
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SetTrapEvent">
            <summary>
            Event that sets the ground tile with the specified trap 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SetTrapEvent.TrapID">
            <summary>
            The trap being added 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.CounterTrapEvent">
            <summary>
            Event that sets the ground tile with the specified trap at the character's location 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterTrapEvent.TrapID">
            <summary>
            The trap being added 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterTrapEvent.Emitter">
            <summary>
            The particle VFX 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CounterTrapEvent.Sound">
            <summary>
            The sound effect of the VFX
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TriggerTrapEvent">
            <summary>
            Event that triggers the effects of the trap tile
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.TriggerTrapEvent.ExceptID">
            <summary>
            The trap to ignore triggering
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RevealTrapEvent">
            <summary>
            Event that makes the trap revealed
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveTrapEvent">
            <summary>
            Event that removes the trap
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ChangeTerrainEvent">
            <summary>
            Event that changes terrain of one type to another type.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveTerrainBaseEvent.RemoveSound">
            <summary>
            The remove terrain SFX
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveTerrainBaseEvent.RemoveAnim">
            <summary>
            The particle VFX
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveTerrainEvent">
            <summary>
            Event that removes the specified terrain and replaces it with a floor tile, replacing it with a floor tile
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveTerrainEvent.TileTypes">
            <summary>
            The list of terrains that can be removed
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveTerrainStateEvent">
            <summary>
            Event that removes the terrain if it contains one of the specified TerrainStates, replacing it with a floor tile
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShatterTerrainEvent">
            <summary>
            Event that removes the specified terrain and the area around it, replacing it with a floor tile
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RemoveItemEvent">
            <summary>
            Event that destroys the item on the tile
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RemoveItemEvent.BlockedByTerrain">
            <summary>
            Whether the item isn't destroyed if the tile has a terrain
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.KeyCheckEvent">
            <summary>
            Event that checks if the tile can be unlocked by checking if the item matches in the UnlockState tile state 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.KeyUnlockEvent">
            <summary>
            Event that applies the effects of the unlockable tile if the item matches in the UnlockState tile state 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TMEvent">
            <summary>
            Event that teaches the user the move in the item's ItemIDState
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FormChoiceEvent">
            <summary>
            Event that prompts the user which form to change to and sets the value in SwitchFormContext
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FormChoiceEvent.Species">
            <summary>
            The required species for this event to have effect 
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FormChoiceEvent.IncludeTemp">
            <summary>
            Whether to include temporary forms as an option 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DeactivateItemEvent">
            <summary>
            Event that deactivates the use of the item by setting its hidden value 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SwitchFormEvent">
            <summary>
            Event that changes the form of the user using the value in SwitchFormContext
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LinkBoxEvent">
            <summary>
            Event that prompts the user to recall or delete moves and sets up MoveLearnContext and MoveDeleteContext
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.LinkBoxEvent.IncludePreEvolutions">
            <summary>
            Whether pre-evolution moves can be relearned
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MoveLearnEvent">
            <summary>
            Event that causes the user to relearn a move using the value in MoveLearnContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MoveDeleteEvent">
            <summary>
            Event that causes the user to delete a move using the value in MoveDeleteContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AbilityCapsuleEvent">
            <summary>
            Event that prompts the user to learn a new ability and sets up AbilityLearnContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AbilityLearnEvent">
            <summary>
            Event that causes the user to learn a new ability using the value in AbilityLearnContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AbilityDeleteEvent">
            <summary>
            Event that deletes the user's ability based on the value in the AbilityDeleteContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StorageBoxEvent">
            <summary>
            Event that prompts the user which item to withdraw from the storage and sets up WithdrawStorageContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WithdrawItemEvent">
            <summary>
            Event that withdraws an item from storage using the value in WithdrawStorageContext
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DepositBoxEvent">
            <summary>
            Event that selects the item currently held by the user to send to the storage 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.StoreItemEvent">
            <summary>
            Event that stores an item using the value in DepositStorageContext
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.AssemblyBoxEvent">
            <summary>
            Event that prompts the user which assembly member to add to the team the sets up WithdrawStorageContext 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.WithdrawRecruitEvent">
            <summary>
            Event that adds a team member from assembly using the value in WithdrawStorageContext
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.FlatRecruitmentEvent">
            <summary>
            Event that sets the additional recruitment rate, not accounting for the species join rate
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FlatRecruitmentEvent.RecruitRate">
            <summary>
            The additional recruitment rate
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TypeRecruitmentEvent">
            <summary>
            Event that boosts the recruitment rate if the target's type matches one of the specified type.
            Otherwise, it drops the recruitment rate
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SkinRecruitmentEvent">
            <summary>
            Event that boosts the recruitment rate if the target is not the default skin. 
            Otherwise, it drops the recruitment rate
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TypeMatchupRecruitmentEvent">
            <summary>
            Event that modifies the recruitment rate based on the type matchup between the user and target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.LevelRecruitmentEvent">
            <summary>
            Event that modifies the recruitment rate based on the level difference between the user and target
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.RecruitmentEvent">
            <summary>
            Event that attempts to recruit the target.
            If successful, the recruit can be nicknamed and added to the team
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.DefeatRecruitmentEvent">
            <summary>
            Event that attempts to recruit the target.
            If successful, the recruit can be nicknamed and added to the team
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DefeatRecruitmentEvent.Numerator">
            <summary>
            The numerator of the modifier
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DefeatRecruitmentEvent.Denominator">
            <summary>
            The denominator of the modififer
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.BaseRecruitmentEvent.ActionScript">
            <summary>
            Tha lua battle script that runs when interacting with the recruit in dungeons 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.MakeNeutralEvent">
            <summary>
            Event that makes the target a neutral faction  
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MakeNeutralEvent.ActionScript">
            <summary>
            Tha lua battle script that runs when interacting with the neutral in dungeons 
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ReviveAllEvent">
            <summary>
            Event that revives all fainted party memebers
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ExitDungeonEvent">
            <summary>
            Event that exits out of the dungeon
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareAfterActionsEvent">
            <summary>
            Event that applies the target with the AfterActions passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareAfterBeingHitsEvent">
            <summary>
            Event that applies the target with the AfterBeingHits passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareAfterHittingsEvent">
            <summary>
            Event that applies the target with the AfterHittings passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareBeforeActionsEvent">
            <summary>
            Event that applies the target with the BeforeActions passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareBeforeBeingHitsEvent">
            <summary>
            Event that applies the target with the BeforeBeingHits passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareBeforeHittingsEvent">
            <summary>
            Event that applies the target with the BeforeHittings passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareBeforeTryActionsEvent">
            <summary>
            Event that applies the target with the BeforeTryActions passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareOnActionsEvent">
            <summary>
            Event that applies the target with the OnActions passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.ShareOnHitTilesEvent">
            <summary>
            Event that applies the target with the OnHitTiles passive effects of the original character's item
            This event should usually be used in proximity events
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.UserAtkStat">
            <summary>
            Attacker's attacking stat
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetDefStat">
            <summary>
            Target's defensive stat
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.UserHitStat">
            <summary>
            Attacker's hit rate stat
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TargetEvadeStat">
            <summary>
            Target's dodge rate stat
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PMDC.Dungeon.DmgMult" -->
        <!-- Badly formed XML comment ignored for member "T:PMDC.Dungeon.AccMult" -->
        <member name="T:PMDC.Dungeon.AttackOnlyEvent">
            <summary>
            Prevents all interactions except for using moves and normal attack.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RespawnFromRandomEvent.Radius">
            <summary>
            The radius from the player characters from which to spawn.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RespawnBaseEvent.MaxFoes">
            <summary>
            The limit to the number of enemies on the map.  If this number is reached or exceeded, no more respawns will occur.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.RespawnBaseEvent.RespawnTime">
            <summary>
            The amount of time it takes for a new enemy team to respawn, in turns.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DespawnRadiusEvent.Radius">
            <summary>
            The maximum radius from a player that enemies are allowed to remain.  Go farther than this when the check occurs, and the enemy despawns.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.DespawnRadiusEvent.DespawnTime">
            <summary>
            The amount of time it takes for a new enemy team to respawn, in turns.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FractionDamageEvent.HPFraction">
            <summary>
            How much HP damage to inflict as a fraction of the target's total HP.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.FractionHealEvent.HPFraction">
            <summary>
            How much HP to heal as a fraction of the target's total HP.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutExpEvent.IgnoreMark">
            <summary>
            
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutScaledExpEvent">
            <summary>
            EXP handed out for defeating an enemy is scaled based on the enemy's level.
            BaseEXP * Numerator * Level / Denominator + 1
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutConstantExpEvent">
            <summary>
            EXP handed out for defeating an enemy is equal to its base EXP yield without any changes.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutPiecewiseExpEvent">
            <summary>
            Uses one formula when the recipient's level is at or lower than the defeated level
            And another when it's higher
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutPiecewiseExpEvent.ScaleMin">
            <summary>
            Minimum level for target's level to be counted at
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutPiecewiseExpEvent.ScaleAdd">
            <summary>
            Added level for the target to be counted at
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutRelativeExpEvent">
            <summary>
            EXP handed out to each team member is scaled based on the team member's level relative to the defeated enemy's level.
            BaseEXP * Numerator * (2 * EnemyLv + LevelBuffer) ^ PowerCurve / (EnemyLv + PlayerLv + LevelBuffer) ^ PowerCurve / Denominator + 1
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutRelativeExpEvent.Numerator">
            <summary>
            Numerator of ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutRelativeExpEvent.Denominator">
            <summary>
            Denominator for ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutRelativeExpEvent.LevelBuffer">
            <summary>
            Number to add to numerator and denominator to buffer the ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutRelativeExpEvent.PowerCurve">
            <summary>
            Exponent when underleveled
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutHarmonicExpEvent">
            <summary>
            EXP handed out to each team member is scaled based on the team member's level relative to the defeated enemy's level.
            BaseEXP * Numerator * LevelBuffer / (PlayerLv - EnemyLv + LevelBuffer) / Denominator + 1
            This means it cannot be applied to situations where PlayerLv is LevelBuffer levels lower than EnemyLv due to div by 0
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutHarmonicExpEvent.Numerator">
            <summary>
            Numerator of ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutHarmonicExpEvent.Denominator">
            <summary>
            Denominator for ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutHarmonicExpEvent.LevelBuffer">
            <summary>
            Number to add to numerator and denominator to buffer the ratio
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.HandoutStackExpEvent">
            <summary>
            EXP handed out to each team member is scaled based on the team member's level relative to the defeated enemy's level.
            BaseEXP * Numerator * (EnemyLv - PlayerLv + LevelBuffer) / (LevelBuffer) / Denominator + 1
            Will drop to 0 if PlayerLv is LevelBuffer levels higher than EnemyLv
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutStackExpEvent.Numerator">
            <summary>
            Numerator of ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutStackExpEvent.Denominator">
            <summary>
            Denominator for ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.HandoutStackExpEvent.LevelBuffer">
            <summary>
            Number to add to numerator and denominator to buffer the ratio
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AutoReviveEvent.AskToUse">
            <summary>
            Asks to use the item.  Can be refused.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.AutoReviveEvent.DefaultYes">
            <summary>
            For ask to use only: defaults to automatically choosing yes for players and enemies that know how to use it.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.CompassEvent.EligibleTiles">
            <summary>
            Tiles eligible to be pointed to.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BattlePositionEvent">
            <summary>
            Sets the position of team members for starting a battle.
            The first loc in the list is where team member 1 should be
            The second is where team member 2 should be
            etc.
            All positions are relative to the first entrance.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.BeginBattleEvent">
            <summary>
            Sets Team Mode On for boss battles and adds a map condition for checking if all enemies have been defeated.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.InvokeTrapEvent">
            <summary>
            Event that applies the trap behavior
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeTrapEvent.HitboxAction">
            <summary>
            Data on the hitbox of the attack. Controls range and targeting
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeTrapEvent.Explosion">
            <summary>
            Optional data to specify a splash effect on the tiles hit
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeTrapEvent.NewData">
            <summary>
            Events that occur with this trap.
            Before it's used, when it hits, after it's used, etc
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeTrapEvent.Message">
            <summary>
            The message displayed when the trap is triggered
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.InvokeTrapEvent.OneTime">
            <summary>
            Whether the trap can be activated only once
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChestEvent.ChestAnimation">
            <summary>
            The animation to play when the chest opens.
            Defaults to Chest_Open.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.ChestEvent.ChestEmptyTile">
            <summary>
            The empty chest tile to spawn after the chest is opened.
            Defaults to chest_empty.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpawnItemsEvent">
            <summary>
            This event spawns a number of items from the source tile/object onto the tiles around it, like the ChestEvent
            item spawning.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnItemsEvent.MaxRangeWidth">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnItemsEvent.MaxRangeHeight">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpawnEnemiesEvent">
            <summary>
            This event spawns a number of enemy mobs from the source tile/object onto the tiles around it, like the ChestEvent
            item spawning.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnEnemiesEvent.MaxRangeWidth">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnEnemiesEvent.MaxRangeHeight">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpawnRandomItemsEvent">
            <summary>
            This event spawns a number of items from the source tile/object onto the tiles around it, like the ChestEvent
            item spawning.  It picks the data randomly from a spawn list.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnRandomItemsEvent.MaxRangeWidth">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnRandomItemsEvent.MaxRangeHeight">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.SpawnRandomEnemiesEvent">
            <summary>
            This event spawns a number of enemy mobs from the source tile/object onto the tiles around it, like the ChestEvent
            item spawning.  It picks the data randomly from a spawn list.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnRandomEnemiesEvent.MaxRangeWidth">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.SpawnRandomEnemiesEvent.MaxRangeHeight">
            <summary>
            Max range/distance to spawn from the origin.
            </summary>
        </member>
        <member name="T:PMDC.Dungeon.TransformTileEvent">
            <summary>
            This event transforms a specific tile into another tile.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MonsterHouseOwnerEvent.MobRange">
            <summary>
            Number of monsters to spawn.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MonsterHouseOwnerEvent.ItemPercent">
            <summary>
            Percent of monsters carrying items.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MonsterHouseTableState.MonsterHouseWarningTile">
            <summary>
            If this is set, this tile will be used to display a warning for monster houses.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MonsterHouseTableState.ChestAmbushWarningTile">
            <summary>
            If this is set, this tile will be used to replace the chest in a chest ambush.
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MonsterHouseTableState.NoMonsterHallOnBlockLightTiles">
            <summary>
            If this is set to true, monster halls will never appear on tiles where you can't see the warning tile
            </summary>
        </member>
        <member name="F:PMDC.Dungeon.MonsterHouseTableState.NoMonsterHouseEntrances">
            <summary>
            If this is set to true, you will not be able to spawn into a monster house upon entering a floor.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.ChestStep`1">
            <summary>
            A monster house that takes the form of a booby-trapped chest.
            Once opened, items spill out, the walls lock down, and monsters appear.
            All must be defeated in order to unlock.
            It could also just be a normal chest.
            This step chooses an existing room to put the house in.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.ChestStep`1.Ambush">
            <summary>
            Determines if this is actually a monster house and not just a chest with treasure.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ChestStep`1.Filters">
            <summary>
            Used to filter out unwanted rooms to be used for this monster house.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.Treasures">
            <summary>
            Treasures found in the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.TileTreasures">
            <summary>
            Tiles (such as exits or traps) found in the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.GuardTypes">
            <summary>
            Enemies found in the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.HallLength">
            <summary>
            Length of the hall connecting the main path to the detour room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BaseDetourStep`1.GenericRooms">
            <summary>
            The possible types of room shapes.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.KeyDetourStep`1">
            <summary>
            Adds an extra room to the layout that can only be accessed by using a key item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.KeyDetourStep`1.LockedTile">
            <summary>
            The tile with which to lock the room with.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.KeyDetourStep`1.KeyItem">
            <summary>
            The item with which to unlock the room with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SwitchDetourStep`1">
            <summary>
            Adds an extra room to the layout that can only be accessed by pushing a switch.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.SealedTile">
            <summary>
            The tile with which to lock the room with.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.SwitchTile">
            <summary>
            The tile that serves as the switch to open the door.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.TimeLimit">
            <summary>
            Determines if a time limit is triggered when pressing the switch.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchDetourStep`1.EntranceCount">
            <summary>
            The number of detours created.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.AddBossRoomStep`1">
            <summary>
            Given a floor plan, this step attaches a boss room connected to an existing room, and then attaches a vault room that is unlocked when the player defeats the boss.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.Filters">
            <summary>
            Determines which rooms are eligible to have the boss room added on.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.BossRooms">
            <summary>
            The room types that can be used for the boss room being added.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.BossComponents">
            <summary>
            Components that the newly added boss room will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.TreasureRooms">
            <summary>
            The room types that can be used for the treasure room being added.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.VaultComponents">
            <summary>
            Components that the newly added treasure room will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.GenericHalls">
            <summary>
            The room types that can be used as the intermediate hall.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.BossHallComponents">
            <summary>
            Components that the hall between the boss room and the rest of the layout will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.AddBossRoomStep`1.VaultHallComponents">
            <summary>
            Components that the hall between the boss room and the vault room will be labeled with.
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.AddBossRoomStep`1.PrepareBossRoom(RogueElements.IRandom,RogueElements.FloorPlan,System.Boolean)">
            <summary>
            Returns a random boss room or hall that can fit in the specified floor.
            </summary>
            <param name="rand"></param>
            <param name="floorPlan"></param>
            <param name="isHall"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.LevelGen.AddBossRoomStep`1.PrepareTreasureRoom(RogueElements.IRandom,RogueElements.FloorPlan,System.Boolean)">
            <summary>
            Returns a random boss room or hall that can fit in the specified floor.
            </summary>
            <param name="rand"></param>
            <param name="floorPlan"></param>
            <param name="isHall"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.FloorStairsDistanceStep`3">
            <summary>
            Adds the entrance and exit to the floor.  Is room-conscious.
            The algorithm will try to place them within and outside of a certain specified range.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TEntrance"></typeparam>
            <typeparam name="TExit"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.FloorStairsDistanceStep`3.Distance">
            <summary>
            Range of distance in tiles that entrances and exits mut be apart.  start-inclusive, end-exclusive
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.FloorStairsDistanceStep`3.GetOutlet``1(`0,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Attempt to choose an outlet in a room with no entrance/exit, and updates their availability.  If none exists, default to a chosen room.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="map"></param>
            <param name="free_indices"></param>
            <param name="used_indices"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.GridPathBeetle`1">
            <summary>
            Populates the empty floor plan of a map by creating a path consisting of one big room in the middle, with normal rooms connected to it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.Vertical">
            <summary>
            Choose a horizontal or vertical orientation.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.LegPercent">
            <summary>
            The number of small rooms attached to the main large room, as a percent of the rooms possible.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.ConnectPercent">
            <summary>
            The number of connections between adjacent small rooms, as a percent of the connections possible.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.FromCorners">
            <summary>
            Allows the main body to be in a corner instead of in the center.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathBeetle`1.GiantHallGen">
            <summary>
            The room types that can be used for the giant room in the layout.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathBeetle`1.LargeRoomComponents">
            <summary>
            Components that the giant room will be labeled with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.GridPathPyramid`1">
            <summary>
            An awful and overspecific floor plan made specifically for one floor of one dungeon.
            Places a giant room somewhere in the center of the mega floor
            Places a connecting room directly below it
            Behaves like GridPathBranch starting from that connecting room.
            Don't use this class anywhere else.  It needs to be broken down later.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.GridPathPyramid`1.RoomRatio">
            <summary>
            The percentage of total rooms in the grid plan that the step aims to fill.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathPyramid`1.BranchRatio">
            <summary>
            The percent amount of branching paths the layout will have in relation to its straight paths.
            0 = A layout without branches. (Worm)
            50 = A layout that branches once for every two extensions. (Tree)
            100 = A layout that branches once for every extension. (Branchier Tree)
            200 = A layout that branches twice for every extension. (Fuzzy Worm)
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathPyramid`1.GiantHallGen">
            <summary>
            The room types that can be used for the giant room in the layout.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathPyramid`1.LargeRoomComponents">
            <summary>
            Components that the giant room will be labeled with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathPyramid`1.CornerRoomComponents">
            <summary>
            Components that the rooms in the furthest direction from the giant room in a cardinal will be given, in addition to the normal components.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathPyramid`1.NoForcedBranches">
            <summary>
            Prevents the step from making branches in the path, even if it would fail the space-fill quota.
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.GridPathPyramid`1.GetRoomExpandDirs(RogueElements.GridPlan,RogueElements.Loc)">
            <summary>
            Gets the directions a room can expand in.
            </summary>
            <param name="floorPlan"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.GridPathEdge`1">
            <summary>
            Populates the empty grid plan of a map by putting all rooms on one side of the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.GridPathEdge`1.Edge">
            <summary>
            The edge of the map where the rooms will spawn in.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathEdge`1.RoomRatio">
            <summary>
            The percentage of total rooms in the edge that the step aims to fill.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathEdge`1.HallRatio">
            <summary>
            The percentage of total halls in grid tiles not on the chosen edge that the step aims to fill.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathEdge`1.HallBranchRatio">
            <summary>
            The percent amount of branching paths the hall layout will have in relation to its straight paths.
            0 = A layout without branches. (Worm)
            50 = A layout that branches once for every two extensions. (Tree)
            100 = A layout that branches once for every extension. (Branchier Tree)
            200 = A layout that branches twice for every extension. (Fuzzy Worm)
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.GridPathEdge`1.CreateRoomsOnEdge(RogueElements.IRandom,RogueElements.GridPlan,RogueElements.Dir4,System.Int32)">
            <summary>
            Creates the specified number of rooms along the edge, with a max set as the length of the edge
            </summary>
            <param name="rand"></param>
            <param name="floorPlan"></param>
            <param name="edge"></param>
            <param name="numRooms"></param>
            <returns>A list of all rooms created along the edge</returns>
        </member>
        <member name="M:PMDC.LevelGen.GridPathEdge`1.GetRoomExpandDirs(RogueElements.GridPlan,RogueElements.Loc)">
            <summary>
            Gets the directions a room can expand in.
            </summary>
            <param name="floorPlan"></param>
            <param name="loc"></param>
            <returns></returns>
        </member>
        <member name="M:PMDC.LevelGen.GridPathEdge`1.PopRandomLocEqual(RogueElements.IRandom,System.Collections.Generic.List{RogueElements.Loc})">
            <summary>
            Gets a possible terminal room to expand.  Equal distribution.
            </summary>
            <param name="rand"></param>
            <param name="locs"></param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.GridPathTreads`1">
            <summary>
            Creates a grid plan with two large "tread" rooms along the sides and a set of rooms in the middle.
            Inverse of GridPathBeetle.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.GridPathTreads`1.Vertical">
            <summary>
            Choose a horizontal or vertical orientation.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathTreads`1.RoomPercent">
            <summary>
            The number of small rooms attached to the main large rooms, as a percent of the rooms possible.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathTreads`1.ConnectPercent">
            <summary>
            The number of connections between adjacent small rooms, as a percent of the connections possible.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.GridPathTreads`1.GiantRoomsGen">
            <summary>
            The room types that can be used for the giant rooms in the layout.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.GridPathTreads`1.LargeRoomComponents">
            <summary>
            Components that the giant rooms will be labeled with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SetGridInnerComponentStep`1">
            <summary>
            Takes all rooms in the INSIDE of a map's grid plan and gives them a specified component.
            These components can be used to identify the room in some way for future filtering.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.FloorTerrainStep`1">
            <summary>
            Sets terrain in the entire floor to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.FloorTerrainStep`1.Terrain">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.FloorTerrainStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MapDataStep`1">
            <summary>
            Sets various attributes about the map.
            Including the music, time limit, and darkness of the floor. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.Music">
            <summary>
            The default map music.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.TimeLimit">
            <summary>
            How many turns the player can spend on the map before an instant game over.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.TileSight">
            <summary>
            The darkness level for map exploration.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.CharSight">
            <summary>
            The darkness level for character viewing.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MapDataStep`1.ClampCamera">
            <summary>
            Clamps the map edges so that the camera does not scroll past them.  Does not work on wrapped-around maps.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MapTitleDropStep`1">
            <summary>
            Makes the map name show up before fading in.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.MapTimeLimitStep`1">
            <summary>
            Sets only time limit for the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.MapTimeLimitStep`1.TimeLimit">
            <summary>
            How many turns the player can spend on the map before an instant game over.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.DefaultMapStatusStep`1">
            <summary>
            Adds a map status that is considered the "default" for that map.
            The map will always revert back to this status even if replaced (it will wait for the replacing status to run out).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.DefaultMapStatusStep`1.SetterID">
            <summary>
            The map status used to set the default map status.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.DefaultMapStatusStep`1.DefaultMapStatus">
            <summary>
            The possible default map statuses.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.StateMapStatusStep`1">
            <summary>
            Adds a map status to the map, with the specified MapStatusStates
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.MapTileStep`1">
            <summary>
            Sets tile in a room to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.MapTileStep`1.Tile">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MapTileStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnSettingsStep`1">
            <summary>
            Chooses the enemy limit and respawn time for the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.Priority">
            <summary>
            Priority of execution in Turn End operations
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.Respawn">
            <summary>
            The respawn step.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.MaxFoes">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnSettingsStep`1.RespawnTime">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MonsterHallStep`1">
            <summary>
            A monster house that occurs in hallways.
            The room will gradually crumble away to reveal all monsters and items.
            This step chooses an existing room (hallways are rooms) to put the house in.  The room must have a one-tile chokepoint to be selected.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHallStep`1.Filters">
            <summary>
            Used to filter out unwanted rooms to be used for this monster house.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHallStep`1.Size">
            <summary>
            The final size of the room after the crumbling finishes.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.Items">
            <summary>
            Items that can be found in the monster house.
            This is in addition to the items naturally found on the map.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.ItemThemes">
            <summary>
            Themes that items in the item pool will be filtered by.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.Mobs">
            <summary>
            Mobs that can be found in the monster house.
            This is in addition to the mobs naturally found on the map.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseBaseStep`1.MobThemes">
            <summary>
            Themes that mobs in the mob pool will be filtered by.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MonsterHouseStep`1">
            <summary>
            A standard monster house that appears as a room filled with treasure.
            When an explorer enters the premises, the monsters appear.
            This step chooses an existing room to put the house in.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.MonsterHouseStep`1.Filters">
            <summary>
            Used to filter out unwanted rooms to be used for this monster house.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MonsterMansionStep`1">
            <summary>
            A monster house that consists of the entire floor.
            When it activates, you can see all enemies on the map, and all enemies can see you.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.PatternPlacerStep`1.AllowTerminal">
            <summary>
            Allows terminal rooms as spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.PatternPlacerStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.PatternPlan.MapID">
            <summary>
            Map file to load.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.PatternSpawnStep`2">
            <summary>
            Litters placeables on a room in specified patterns.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.PatternTerrainStep`1">
            <summary>
            Litters placeables on a room in specified patterns.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.PatternTerrainStep`1.Terrain">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomPostProcStep`1">
            <summary>
            Sets terrain in a room to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.PostProc">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.IncludeHalls">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomPostProcStep`1.IncludeRooms">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.NoConnectRoom">
            <summary>
            Rooms that are disconnected from the main path.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.NoEventRoom">
            <summary>
            Rooms that should not have any events taking place in them.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenEvo`1">
            <summary>
            Generates an evolution room.  It's 7x6 in size and hardcoded to look a specific way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenEvoSmall`1">
            <summary>
            Generates an evolution room.  It's 5x6 in size and hardcoded to look a specific way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenGuardedCave`1">
            <summary>
            Generates a cave guarded by a single mob.  It's hardcoded to look a specific way.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenOasis`1">
            <summary>
            Generates a cave-like room using cellular automata, then fills it with water except an outer border.
            Can also spawn items on the shore.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenOasis`1.ItemAmount">
            <summary>
            The amount of items to spawn.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenOasis`1.Treasures">
            <summary>
            Which items to spawn.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenOasis`1.WaterTerrain">
            <summary>
            The terrain used for the water ring.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenSpecificBoss`1">
            <summary>
            Generates a boss room with specific tiles and mobs.
            EDITOR UNFRIENDLY
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.RoomGenWaterRing`1">
            <summary>
            Generates a room containing a ring of water encircling treasure.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.PadWidth">
            <summary>
            The extra width of the room added to the area occupied by the water ring.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.PadHeight">
            <summary>
            The extra height of the room added to the area occupied by the water ring.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.ItemAmount">
            <summary>
            The amount of items to spawn.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.Treasures">
            <summary>
            Which items to spawn.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.RoomGenWaterRing`1.WaterTerrain">
            <summary>
            The terrain used for the water ring.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.UnVaultableRoom">
            <summary>
            Rooms that should not be considered for attaching vault entrances.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RoomTerrainStep`1">
            <summary>
            Sets terrain in a number of rooms to a certain value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.Terrain">
            <summary>
            Tile representing the water terrain to paint with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.TerrainStencil">
            <summary>
            Determines which tiles are eligible to be painted on.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.IncludeHalls">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.RoomTerrainStep`1.IncludeRooms">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.BaseSealStep`1.Filters">
            <summary>
            Determines the rooms that serve as a vault and are to be locked away.
            </summary>
        </member>
        <member name="M:PMDC.LevelGen.BaseSealStep`1.sealBorderRay(`0,System.Collections.Generic.Dictionary{RogueElements.Loc,PMDC.LevelGen.BaseSealStep{`0}.SealType},RogueElements.IFloorRoomPlan,RogueElements.LocRay8,RogueElements.Dir8,RogueElements.Dir8)">
            <summary>
            chooses and caegorizes the tile to be sealed
            </summary>
            <param name="map"></param>
            <param name="sealList"></param>
            <param name="plan"></param>
            <param name="loc"></param>
            <param name="dir"></param>
            <returns>Whether it affected the tile outwards or not</returns>
        </member>
        <member name="T:PMDC.LevelGen.BossSealStep`1">
            <summary>
            One part of several steps used to create a boss room.
            This step takes an already-placed boss room, with an already-placed summoning tile and fills it with data on which tiles to lock down before summoning the boss.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.BossSealStep`1.SealedTile">
            <summary>
            The tile used to seal the room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.BossSealStep`1.BossTile">
            <summary>
            The tile used to summon the battle.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.BossSealStep`1.BossFilters">
            <summary>
            Singles out the boss room intended for this process.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.GuardSealStep`1">
            <summary>
            One part of several steps used to create a sealed key room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.KeySealStep`1">
            <summary>
            One part of several steps used to create a sealed key room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.KeySealStep`1.LockedTile">
            <summary>
            The tile that is used to block off the room.
            It is removed when the player inserts the key into the Key Tile.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.KeySealStep`1.KeyTile">
            <summary>
            The tile with which to lock the room with, requiring a key to open.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.KeySealStep`1.KeyItem">
            <summary>
            The item to be used as a key to unlock the vault.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SwitchSealStep`1">
            <summary>
            One part of several steps used to create a switch-opened sealed room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            The filter must be able to single out the key rooms intended for this process.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.SealedTile">
            <summary>
            The tile that is used to block off the room.
            It is removed when the player pressed the switch.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.SwitchTile">
            <summary>
            The switch tile that unlocked the vaults.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.Amount">
            <summary>
            Determines how many switches need to be placed.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.Revealed">
            <summary>
            Determines if the switch tile is revealed.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SwitchSealStep`1.TimeLimit">
            <summary>
            Determines if a time limit is triggered when pressing the switch.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.SwitchSealStep`1.SwitchFilters">
            <summary>
            Determines the rooms that the switch can be placed in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.TerrainSealStep`1">
            <summary>
            One part of several steps used to create a room sealed by terrain, or several thereof.
            This step takes the target rooms and surrounds them with the selected walls, with one key block used to unlock them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.TerrainSealStep`1.SealTerrain">
            <summary>
            The tile that is used to block off the main entrance to the room.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.TerrainSealStep`1.BorderTerrain">
            <summary>
            The tile that is used to border the room.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.ShopStep`1">
            <summary>
            Spawns a shop somewhere in the map.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.ShopStep`1.SecurityStatus">
            <summary>
            The map status used to check for thievery.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.Items">
            <summary>
            The items that can be sold in the shop.
            This is filtered by Item Themes when generating.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.ItemThemes">
            <summary>
            Every shop chooses a theme to populate its catalog with.
            This variable determines the possible themes to filter the items with.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.Mobs">
            <summary>
            The mobs that will be spawned if the player is caught stealing.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.StartMob">
            <summary>
            The mob that will run the shop.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.ShopStep`1.Filters">
            <summary>
            Narrows down the rooms in the map that the shop can spawn in.  No boss rooms, etc.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.ShopStep`1.Personality">
            <summary>
            The personality of the shopkeeper.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.TempTileStep`1">
            <summary>
            One part of several steps used to create a switch-opened sealed room, or several thereof.
            This step takes the target rooms and surrounds them with unbreakable walls, with one key block used to unlock them.
            The filter must be able to single out the key rooms intended for this process.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.TempTileStep`1.TempTile">
            <summary>
            The temp tile
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.TempTileStep`1.TempStatus">
            <summary>
            The status to keep track of the countdown
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.TempTileStep`1.TileFilters">
            <summary>
            Determines the rooms that the switch can be placed in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobCheckVersionDiff">
            <summary>
            Spawns the mob if the player's random seed has a specific remainder when divided by a specific number.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckVersionDiff.Div">
            <summary>
            The number to divide the player's seed by.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckVersionDiff.Remainder">
            <summary>
            The remainder to check for when dividing the player's seed.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobCheckSaveVar">
            <summary>
            Spawns the mob if the player's savevar is true.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckSaveVar.SaveVar">
            <summary>
            The savevar to query
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobCheckTimeOfDay">
            <summary>
            Spawns the mob if the time of day is right.  DOESNT WORK.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobCheckTimeOfDay.Time">
            <summary>
            The time of day
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnWeak">
            <summary>
            Spawns the mob with a 35% fullness and 50% PP.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnAltColor">
            <summary>
            Spawns the mob with a custom shiny chance.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnAltColor.Chance">
            <summary>
            Fractional chance of occurrence.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnAltColor.Odds">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnMovesOff">
            <summary>
            Spawns the mob with moves turned off.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnMovesOff.StartAt">
            <summary>
            The move index to start turning moves off.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnMovesOff.Remove">
            <summary>
            Remove the moves entirely.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnBoost">
            <summary>
            Spawn the mob with stat boosts (vitamin boosts)
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnScaledBoost">
            <summary>
            Spawn the mob with stat boosts (vitamin boosts) that scale based on its level
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnItem">
            <summary>
            Spawn the mob with an item.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnItem.Items">
            <summary>
            The possible items.  Picks one.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnItem.MapStartOnly">
            <summary>
            Only give it the item on map generation.
            Respawns that occur after the map is generated do not get the item.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnItem.Chance">
            <summary>
            Chance of item spawn
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnExclBase">
            <summary>
            Spawn the mob with a box containing an exclusive item.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnExclBase.Box">
            <summary>
            Type of box
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnExclBase.MapStartOnly">
            <summary>
            Only give it the item on map generation.
            Respawns that occur after the map is generated do not get the item.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnExclBase.Chance">
            <summary>
            Chance of item spawn.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnInv">
            <summary>
            Spawn the mob with its inventory filled with the specified items.
            Inventory items are not dropped when the mob is defeated.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnInv.Items">
            <summary>
            Items to give.  All of them will be placed in the mob's inventory.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnInv.MapStartOnly">
            <summary>
            Only give it the item on map generation.
            Respawns that occur after the map is generated do not get the item.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnLevelScale">
            <summary>
            Spawn the mob with a level that scales based on the current floor
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLevelScale.StartFromID">
            <summary>
            The floor to start scaling level at.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLevelScale.AddNumerator">
            <summary>
            The numerator for the fractional level to add per floor.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLevelScale.AddDenominator">
            <summary>
            The denominator for the fractional level to add per floor.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnLoc">
            <summary>
            Spawn the mob with a specific location and direction
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLoc.Loc">
            <summary>
            The location.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLoc.Dir">
            <summary>
            The direction.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnUnrecruitable">
            <summary>
            Spawn the mob with recruitment turned off.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnFoeConflict">
            <summary>
            Spawns the mob with aggression towards enemy mobs.  Only applies to neutral mobs.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnInteractable">
            <summary>
            Spawn the mob with an effect on interaction.  Only applies to allies or neutral mobs.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnLuaTable">
            <summary>
            Spawn the mob with a lua data table.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.MobSpawnLuaTable.LuaTable">
            <summary>
            The lua table.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MobSpawnDiscriminator">
            <summary>
            Spawn the mob with a discriminator.  This is used for personality calculations.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.MoneyTrailSpawnStep`2">
            <summary>
            Spawns money in a trail leading up to an item at the endpoint.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="M:PMDC.LevelGen.MoneyTrailSpawnStep`2.moveForward(`0,RogueElements.Loc,System.Int32@)">
            <summary>
            
            </summary>
            <param name="map"></param>
            <param name="inLoc"></param>
            <param name="degreeRotation">Rotation is treated as clockwise from down</param>
            <returns></returns>
        </member>
        <member name="M:PMDC.LevelGen.MoneyTrailSpawnStep`2.getRandDirFromDegree(RogueElements.IRandom,System.Int32)">
            <summary>
            
            </summary>
            <param name="rand"></param>
            <param name="degreeRotation">Rotation is treated as clockwise from down</param>
            <returns></returns>
        </member>
        <member name="T:PMDC.LevelGen.BossBandContextSpawner`1">
            <summary>
            Spawns a team by taking X amount of individual mob spawns from the map's respawn table, and adding a mob spawn extra to the leader.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.BossBandContextSpawner`1.TeamSize">
            <summary>
            This amount is in total team members.
            </summary>
        </member>
        <member name="P:PMDC.LevelGen.BossBandContextSpawner`1.LeaderFeatures">
            <summary>
            Additional alterations made to the leader after it is created but before it is spawned.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.RescueSpawner`1">
            <summary>
            Spawns a rescue flag somewhere on the map, complete with a Monster House.
            This step should never be explicitly added to a map's gen steps.
            Instead, it needs to be dynamically added only when in rescue mode.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.SpacedRoomSpawnStep`2">
            <summary>
            Spawns objects in randomly chosen rooms.  Once a room is chosen, it and adjacent rooms cannot be chosen.
            Large rooms have the same probability as small rooms.
            </summary>
            <typeparam name="TGenContext"></typeparam>
            <typeparam name="TSpawnable"></typeparam>
        </member>
        <member name="P:PMDC.LevelGen.SpacedRoomSpawnStep`2.IncludeHalls">
            <summary>
            Makes halls eligible for spawn.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpeciesItemActiveTeamSpawner`1">
            <summary>
            Gets specific items belonging to a team member of the current save file
            </summary>
            <typeparam name="TGenContext"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.SpeciesItemContextSpawner`1">
            <summary>
            Gets specific items of a certain mon on the floor
            </summary>
            <typeparam name="TGenContext"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.SpeciesItemElementSpawner`1">
            <summary>
            Gets specific items of a certain specified type
            </summary>
            <typeparam name="TGenContext"></typeparam>
        </member>
        <member name="T:PMDC.LevelGen.SetCompassStep`1">
            <summary>
            Orients all already-placed compass tiles to point to points of interest.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:PMDC.LevelGen.SetCompassStep`1.CompassTile">
            <summary>
            Tile used as compass.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.FloorNameDropZoneStep">
            <summary>
            Names all floors of the dungeon segment according to a naming convention.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.FloorNameDropZoneStep.DropPriority">
            <summary>
            At what point in the map start to drop the title.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SaveVarsZoneStep">
            <summary>
            The zone step responsible for placing the rescue tile and monster house when a rescue is active.
            Does nothing otherwise.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SaveVarsZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the step in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpreadBossZoneStep">
            <summary>
            Generates boss battles randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadBossZoneStep.ItemAmount">
            <summary>
            Amount for the items randomly chosen from spawnlist
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpreadHouseZoneStep">
            <summary>
            Generates monster houses randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadHouseZoneStep.Priority">
            <summary>
            At what point in the map gen process to run the step in.
            </summary>
        </member>
        <member name="T:PMDC.LevelGen.SpreadVaultZoneStep">
            <summary>
            Generates vaults randomly across the whole dungeon segment.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemPriority">
            <summary>
            At what point in the map gen process to run the item placement steps in.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.TilePriority">
            <summary>
            At what point in the map gen process to run the tile placement steps in.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.MobPriority">
            <summary>
            At what point in the map gen process to run the mob placement steps in.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.Items">
            <summary>
            Encounter table for items found in the vault.
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemAmount">
            <summary>
            Amount of the items randomly chosen from spawnlist
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemSpawners">
            <summary>
            Spawners for specific items
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.ItemPlacements">
            <summary>
            Step used to place the items
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.TileSpawners">
            <summary>
            Spawners for specific items
            </summary>
        </member>
        <member name="F:PMDC.LevelGen.SpreadVaultZoneStep.Mobs">
            <summary>
            Encounter table for mobs found in the vault.
            </summary>
        </member>
        <member name="T:PMDC.Program">
            <summary>
            The main class.
            </summary>
        </member>
        <member name="M:PMDC.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:PMDC.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PMDC.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PMDC.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PMDC.Properties.Resources.Icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
    </members>
</doc>
